/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.hawk.service.api;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-11-06")
public class IFCExportOptions implements org.apache.thrift.TBase<IFCExportOptions, IFCExportOptions._Fields>, java.io.Serializable, Cloneable, Comparable<IFCExportOptions> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("IFCExportOptions");

  private static final org.apache.thrift.protocol.TField REPOSITORY_PATTERN_FIELD_DESC = new org.apache.thrift.protocol.TField("repositoryPattern", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField FILE_PATTERNS_FIELD_DESC = new org.apache.thrift.protocol.TField("filePatterns", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField INCLUDE_RULES_FIELD_DESC = new org.apache.thrift.protocol.TField("includeRules", org.apache.thrift.protocol.TType.MAP, (short)3);
  private static final org.apache.thrift.protocol.TField EXCLUDE_RULES_FIELD_DESC = new org.apache.thrift.protocol.TField("excludeRules", org.apache.thrift.protocol.TType.MAP, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new IFCExportOptionsStandardSchemeFactory());
    schemes.put(TupleScheme.class, new IFCExportOptionsTupleSchemeFactory());
  }

  public String repositoryPattern; // optional
  public List<String> filePatterns; // optional
  public Map<String,Map<String,Set<String>>> includeRules; // optional
  public Map<String,Map<String,Set<String>>> excludeRules; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    REPOSITORY_PATTERN((short)1, "repositoryPattern"),
    FILE_PATTERNS((short)2, "filePatterns"),
    INCLUDE_RULES((short)3, "includeRules"),
    EXCLUDE_RULES((short)4, "excludeRules");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // REPOSITORY_PATTERN
          return REPOSITORY_PATTERN;
        case 2: // FILE_PATTERNS
          return FILE_PATTERNS;
        case 3: // INCLUDE_RULES
          return INCLUDE_RULES;
        case 4: // EXCLUDE_RULES
          return EXCLUDE_RULES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.REPOSITORY_PATTERN,_Fields.FILE_PATTERNS,_Fields.INCLUDE_RULES,_Fields.EXCLUDE_RULES};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.REPOSITORY_PATTERN, new org.apache.thrift.meta_data.FieldMetaData("repositoryPattern", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FILE_PATTERNS, new org.apache.thrift.meta_data.FieldMetaData("filePatterns", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.INCLUDE_RULES, new org.apache.thrift.meta_data.FieldMetaData("includeRules", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
                new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))))));
    tmpMap.put(_Fields.EXCLUDE_RULES, new org.apache.thrift.meta_data.FieldMetaData("excludeRules", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
                new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(IFCExportOptions.class, metaDataMap);
  }

  public IFCExportOptions() {
    this.repositoryPattern = "*";

  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public IFCExportOptions(IFCExportOptions other) {
    if (other.isSetRepositoryPattern()) {
      this.repositoryPattern = other.repositoryPattern;
    }
    if (other.isSetFilePatterns()) {
      List<String> __this__filePatterns = new ArrayList<String>(other.filePatterns);
      this.filePatterns = __this__filePatterns;
    }
    if (other.isSetIncludeRules()) {
      Map<String,Map<String,Set<String>>> __this__includeRules = new HashMap<String,Map<String,Set<String>>>(other.includeRules.size());
      for (Map.Entry<String, Map<String,Set<String>>> other_element : other.includeRules.entrySet()) {

        String other_element_key = other_element.getKey();
        Map<String,Set<String>> other_element_value = other_element.getValue();

        String __this__includeRules_copy_key = other_element_key;

        Map<String,Set<String>> __this__includeRules_copy_value = new HashMap<String,Set<String>>(other_element_value.size());
        for (Map.Entry<String, Set<String>> other_element_value_element : other_element_value.entrySet()) {

          String other_element_value_element_key = other_element_value_element.getKey();
          Set<String> other_element_value_element_value = other_element_value_element.getValue();

          String __this__includeRules_copy_value_copy_key = other_element_value_element_key;

          Set<String> __this__includeRules_copy_value_copy_value = new HashSet<String>(other_element_value_element_value);

          __this__includeRules_copy_value.put(__this__includeRules_copy_value_copy_key, __this__includeRules_copy_value_copy_value);
        }

        __this__includeRules.put(__this__includeRules_copy_key, __this__includeRules_copy_value);
      }
      this.includeRules = __this__includeRules;
    }
    if (other.isSetExcludeRules()) {
      Map<String,Map<String,Set<String>>> __this__excludeRules = new HashMap<String,Map<String,Set<String>>>(other.excludeRules.size());
      for (Map.Entry<String, Map<String,Set<String>>> other_element : other.excludeRules.entrySet()) {

        String other_element_key = other_element.getKey();
        Map<String,Set<String>> other_element_value = other_element.getValue();

        String __this__excludeRules_copy_key = other_element_key;

        Map<String,Set<String>> __this__excludeRules_copy_value = new HashMap<String,Set<String>>(other_element_value.size());
        for (Map.Entry<String, Set<String>> other_element_value_element : other_element_value.entrySet()) {

          String other_element_value_element_key = other_element_value_element.getKey();
          Set<String> other_element_value_element_value = other_element_value_element.getValue();

          String __this__excludeRules_copy_value_copy_key = other_element_value_element_key;

          Set<String> __this__excludeRules_copy_value_copy_value = new HashSet<String>(other_element_value_element_value);

          __this__excludeRules_copy_value.put(__this__excludeRules_copy_value_copy_key, __this__excludeRules_copy_value_copy_value);
        }

        __this__excludeRules.put(__this__excludeRules_copy_key, __this__excludeRules_copy_value);
      }
      this.excludeRules = __this__excludeRules;
    }
  }

  public IFCExportOptions deepCopy() {
    return new IFCExportOptions(this);
  }

  @Override
  public void clear() {
    this.repositoryPattern = "*";

    this.filePatterns = null;
    this.includeRules = null;
    this.excludeRules = null;
  }

  public String getRepositoryPattern() {
    return this.repositoryPattern;
  }

  public IFCExportOptions setRepositoryPattern(String repositoryPattern) {
    this.repositoryPattern = repositoryPattern;
    return this;
  }

  public void unsetRepositoryPattern() {
    this.repositoryPattern = null;
  }

  /** Returns true if field repositoryPattern is set (has been assigned a value) and false otherwise */
  public boolean isSetRepositoryPattern() {
    return this.repositoryPattern != null;
  }

  public void setRepositoryPatternIsSet(boolean value) {
    if (!value) {
      this.repositoryPattern = null;
    }
  }

  public int getFilePatternsSize() {
    return (this.filePatterns == null) ? 0 : this.filePatterns.size();
  }

  public java.util.Iterator<String> getFilePatternsIterator() {
    return (this.filePatterns == null) ? null : this.filePatterns.iterator();
  }

  public void addToFilePatterns(String elem) {
    if (this.filePatterns == null) {
      this.filePatterns = new ArrayList<String>();
    }
    this.filePatterns.add(elem);
  }

  public List<String> getFilePatterns() {
    return this.filePatterns;
  }

  public IFCExportOptions setFilePatterns(List<String> filePatterns) {
    this.filePatterns = filePatterns;
    return this;
  }

  public void unsetFilePatterns() {
    this.filePatterns = null;
  }

  /** Returns true if field filePatterns is set (has been assigned a value) and false otherwise */
  public boolean isSetFilePatterns() {
    return this.filePatterns != null;
  }

  public void setFilePatternsIsSet(boolean value) {
    if (!value) {
      this.filePatterns = null;
    }
  }

  public int getIncludeRulesSize() {
    return (this.includeRules == null) ? 0 : this.includeRules.size();
  }

  public void putToIncludeRules(String key, Map<String,Set<String>> val) {
    if (this.includeRules == null) {
      this.includeRules = new HashMap<String,Map<String,Set<String>>>();
    }
    this.includeRules.put(key, val);
  }

  public Map<String,Map<String,Set<String>>> getIncludeRules() {
    return this.includeRules;
  }

  public IFCExportOptions setIncludeRules(Map<String,Map<String,Set<String>>> includeRules) {
    this.includeRules = includeRules;
    return this;
  }

  public void unsetIncludeRules() {
    this.includeRules = null;
  }

  /** Returns true if field includeRules is set (has been assigned a value) and false otherwise */
  public boolean isSetIncludeRules() {
    return this.includeRules != null;
  }

  public void setIncludeRulesIsSet(boolean value) {
    if (!value) {
      this.includeRules = null;
    }
  }

  public int getExcludeRulesSize() {
    return (this.excludeRules == null) ? 0 : this.excludeRules.size();
  }

  public void putToExcludeRules(String key, Map<String,Set<String>> val) {
    if (this.excludeRules == null) {
      this.excludeRules = new HashMap<String,Map<String,Set<String>>>();
    }
    this.excludeRules.put(key, val);
  }

  public Map<String,Map<String,Set<String>>> getExcludeRules() {
    return this.excludeRules;
  }

  public IFCExportOptions setExcludeRules(Map<String,Map<String,Set<String>>> excludeRules) {
    this.excludeRules = excludeRules;
    return this;
  }

  public void unsetExcludeRules() {
    this.excludeRules = null;
  }

  /** Returns true if field excludeRules is set (has been assigned a value) and false otherwise */
  public boolean isSetExcludeRules() {
    return this.excludeRules != null;
  }

  public void setExcludeRulesIsSet(boolean value) {
    if (!value) {
      this.excludeRules = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case REPOSITORY_PATTERN:
      if (value == null) {
        unsetRepositoryPattern();
      } else {
        setRepositoryPattern((String)value);
      }
      break;

    case FILE_PATTERNS:
      if (value == null) {
        unsetFilePatterns();
      } else {
        setFilePatterns((List<String>)value);
      }
      break;

    case INCLUDE_RULES:
      if (value == null) {
        unsetIncludeRules();
      } else {
        setIncludeRules((Map<String,Map<String,Set<String>>>)value);
      }
      break;

    case EXCLUDE_RULES:
      if (value == null) {
        unsetExcludeRules();
      } else {
        setExcludeRules((Map<String,Map<String,Set<String>>>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case REPOSITORY_PATTERN:
      return getRepositoryPattern();

    case FILE_PATTERNS:
      return getFilePatterns();

    case INCLUDE_RULES:
      return getIncludeRules();

    case EXCLUDE_RULES:
      return getExcludeRules();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case REPOSITORY_PATTERN:
      return isSetRepositoryPattern();
    case FILE_PATTERNS:
      return isSetFilePatterns();
    case INCLUDE_RULES:
      return isSetIncludeRules();
    case EXCLUDE_RULES:
      return isSetExcludeRules();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof IFCExportOptions)
      return this.equals((IFCExportOptions)that);
    return false;
  }

  public boolean equals(IFCExportOptions that) {
    if (that == null)
      return false;

    boolean this_present_repositoryPattern = true && this.isSetRepositoryPattern();
    boolean that_present_repositoryPattern = true && that.isSetRepositoryPattern();
    if (this_present_repositoryPattern || that_present_repositoryPattern) {
      if (!(this_present_repositoryPattern && that_present_repositoryPattern))
        return false;
      if (!this.repositoryPattern.equals(that.repositoryPattern))
        return false;
    }

    boolean this_present_filePatterns = true && this.isSetFilePatterns();
    boolean that_present_filePatterns = true && that.isSetFilePatterns();
    if (this_present_filePatterns || that_present_filePatterns) {
      if (!(this_present_filePatterns && that_present_filePatterns))
        return false;
      if (!this.filePatterns.equals(that.filePatterns))
        return false;
    }

    boolean this_present_includeRules = true && this.isSetIncludeRules();
    boolean that_present_includeRules = true && that.isSetIncludeRules();
    if (this_present_includeRules || that_present_includeRules) {
      if (!(this_present_includeRules && that_present_includeRules))
        return false;
      if (!this.includeRules.equals(that.includeRules))
        return false;
    }

    boolean this_present_excludeRules = true && this.isSetExcludeRules();
    boolean that_present_excludeRules = true && that.isSetExcludeRules();
    if (this_present_excludeRules || that_present_excludeRules) {
      if (!(this_present_excludeRules && that_present_excludeRules))
        return false;
      if (!this.excludeRules.equals(that.excludeRules))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_repositoryPattern = true && (isSetRepositoryPattern());
    list.add(present_repositoryPattern);
    if (present_repositoryPattern)
      list.add(repositoryPattern);

    boolean present_filePatterns = true && (isSetFilePatterns());
    list.add(present_filePatterns);
    if (present_filePatterns)
      list.add(filePatterns);

    boolean present_includeRules = true && (isSetIncludeRules());
    list.add(present_includeRules);
    if (present_includeRules)
      list.add(includeRules);

    boolean present_excludeRules = true && (isSetExcludeRules());
    list.add(present_excludeRules);
    if (present_excludeRules)
      list.add(excludeRules);

    return list.hashCode();
  }

  @Override
  public int compareTo(IFCExportOptions other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetRepositoryPattern()).compareTo(other.isSetRepositoryPattern());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRepositoryPattern()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.repositoryPattern, other.repositoryPattern);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFilePatterns()).compareTo(other.isSetFilePatterns());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFilePatterns()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.filePatterns, other.filePatterns);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIncludeRules()).compareTo(other.isSetIncludeRules());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIncludeRules()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.includeRules, other.includeRules);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExcludeRules()).compareTo(other.isSetExcludeRules());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExcludeRules()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.excludeRules, other.excludeRules);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("IFCExportOptions(");
    boolean first = true;

    if (isSetRepositoryPattern()) {
      sb.append("repositoryPattern:");
      if (this.repositoryPattern == null) {
        sb.append("null");
      } else {
        sb.append(this.repositoryPattern);
      }
      first = false;
    }
    if (isSetFilePatterns()) {
      if (!first) sb.append(", ");
      sb.append("filePatterns:");
      if (this.filePatterns == null) {
        sb.append("null");
      } else {
        sb.append(this.filePatterns);
      }
      first = false;
    }
    if (isSetIncludeRules()) {
      if (!first) sb.append(", ");
      sb.append("includeRules:");
      if (this.includeRules == null) {
        sb.append("null");
      } else {
        sb.append(this.includeRules);
      }
      first = false;
    }
    if (isSetExcludeRules()) {
      if (!first) sb.append(", ");
      sb.append("excludeRules:");
      if (this.excludeRules == null) {
        sb.append("null");
      } else {
        sb.append(this.excludeRules);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class IFCExportOptionsStandardSchemeFactory implements SchemeFactory {
    public IFCExportOptionsStandardScheme getScheme() {
      return new IFCExportOptionsStandardScheme();
    }
  }

  private static class IFCExportOptionsStandardScheme extends StandardScheme<IFCExportOptions> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, IFCExportOptions struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // REPOSITORY_PATTERN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.repositoryPattern = iprot.readString();
              struct.setRepositoryPatternIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FILE_PATTERNS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list186 = iprot.readListBegin();
                struct.filePatterns = new ArrayList<String>(_list186.size);
                String _elem187;
                for (int _i188 = 0; _i188 < _list186.size; ++_i188)
                {
                  _elem187 = iprot.readString();
                  struct.filePatterns.add(_elem187);
                }
                iprot.readListEnd();
              }
              struct.setFilePatternsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // INCLUDE_RULES
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map189 = iprot.readMapBegin();
                struct.includeRules = new HashMap<String,Map<String,Set<String>>>(2*_map189.size);
                String _key190;
                Map<String,Set<String>> _val191;
                for (int _i192 = 0; _i192 < _map189.size; ++_i192)
                {
                  _key190 = iprot.readString();
                  {
                    org.apache.thrift.protocol.TMap _map193 = iprot.readMapBegin();
                    _val191 = new HashMap<String,Set<String>>(2*_map193.size);
                    String _key194;
                    Set<String> _val195;
                    for (int _i196 = 0; _i196 < _map193.size; ++_i196)
                    {
                      _key194 = iprot.readString();
                      {
                        org.apache.thrift.protocol.TSet _set197 = iprot.readSetBegin();
                        _val195 = new HashSet<String>(2*_set197.size);
                        String _elem198;
                        for (int _i199 = 0; _i199 < _set197.size; ++_i199)
                        {
                          _elem198 = iprot.readString();
                          _val195.add(_elem198);
                        }
                        iprot.readSetEnd();
                      }
                      _val191.put(_key194, _val195);
                    }
                    iprot.readMapEnd();
                  }
                  struct.includeRules.put(_key190, _val191);
                }
                iprot.readMapEnd();
              }
              struct.setIncludeRulesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // EXCLUDE_RULES
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map200 = iprot.readMapBegin();
                struct.excludeRules = new HashMap<String,Map<String,Set<String>>>(2*_map200.size);
                String _key201;
                Map<String,Set<String>> _val202;
                for (int _i203 = 0; _i203 < _map200.size; ++_i203)
                {
                  _key201 = iprot.readString();
                  {
                    org.apache.thrift.protocol.TMap _map204 = iprot.readMapBegin();
                    _val202 = new HashMap<String,Set<String>>(2*_map204.size);
                    String _key205;
                    Set<String> _val206;
                    for (int _i207 = 0; _i207 < _map204.size; ++_i207)
                    {
                      _key205 = iprot.readString();
                      {
                        org.apache.thrift.protocol.TSet _set208 = iprot.readSetBegin();
                        _val206 = new HashSet<String>(2*_set208.size);
                        String _elem209;
                        for (int _i210 = 0; _i210 < _set208.size; ++_i210)
                        {
                          _elem209 = iprot.readString();
                          _val206.add(_elem209);
                        }
                        iprot.readSetEnd();
                      }
                      _val202.put(_key205, _val206);
                    }
                    iprot.readMapEnd();
                  }
                  struct.excludeRules.put(_key201, _val202);
                }
                iprot.readMapEnd();
              }
              struct.setExcludeRulesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, IFCExportOptions struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.repositoryPattern != null) {
        if (struct.isSetRepositoryPattern()) {
          oprot.writeFieldBegin(REPOSITORY_PATTERN_FIELD_DESC);
          oprot.writeString(struct.repositoryPattern);
          oprot.writeFieldEnd();
        }
      }
      if (struct.filePatterns != null) {
        if (struct.isSetFilePatterns()) {
          oprot.writeFieldBegin(FILE_PATTERNS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.filePatterns.size()));
            for (String _iter211 : struct.filePatterns)
            {
              oprot.writeString(_iter211);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.includeRules != null) {
        if (struct.isSetIncludeRules()) {
          oprot.writeFieldBegin(INCLUDE_RULES_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.MAP, struct.includeRules.size()));
            for (Map.Entry<String, Map<String,Set<String>>> _iter212 : struct.includeRules.entrySet())
            {
              oprot.writeString(_iter212.getKey());
              {
                oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.SET, _iter212.getValue().size()));
                for (Map.Entry<String, Set<String>> _iter213 : _iter212.getValue().entrySet())
                {
                  oprot.writeString(_iter213.getKey());
                  {
                    oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, _iter213.getValue().size()));
                    for (String _iter214 : _iter213.getValue())
                    {
                      oprot.writeString(_iter214);
                    }
                    oprot.writeSetEnd();
                  }
                }
                oprot.writeMapEnd();
              }
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.excludeRules != null) {
        if (struct.isSetExcludeRules()) {
          oprot.writeFieldBegin(EXCLUDE_RULES_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.MAP, struct.excludeRules.size()));
            for (Map.Entry<String, Map<String,Set<String>>> _iter215 : struct.excludeRules.entrySet())
            {
              oprot.writeString(_iter215.getKey());
              {
                oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.SET, _iter215.getValue().size()));
                for (Map.Entry<String, Set<String>> _iter216 : _iter215.getValue().entrySet())
                {
                  oprot.writeString(_iter216.getKey());
                  {
                    oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, _iter216.getValue().size()));
                    for (String _iter217 : _iter216.getValue())
                    {
                      oprot.writeString(_iter217);
                    }
                    oprot.writeSetEnd();
                  }
                }
                oprot.writeMapEnd();
              }
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class IFCExportOptionsTupleSchemeFactory implements SchemeFactory {
    public IFCExportOptionsTupleScheme getScheme() {
      return new IFCExportOptionsTupleScheme();
    }
  }

  private static class IFCExportOptionsTupleScheme extends TupleScheme<IFCExportOptions> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, IFCExportOptions struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetRepositoryPattern()) {
        optionals.set(0);
      }
      if (struct.isSetFilePatterns()) {
        optionals.set(1);
      }
      if (struct.isSetIncludeRules()) {
        optionals.set(2);
      }
      if (struct.isSetExcludeRules()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetRepositoryPattern()) {
        oprot.writeString(struct.repositoryPattern);
      }
      if (struct.isSetFilePatterns()) {
        {
          oprot.writeI32(struct.filePatterns.size());
          for (String _iter218 : struct.filePatterns)
          {
            oprot.writeString(_iter218);
          }
        }
      }
      if (struct.isSetIncludeRules()) {
        {
          oprot.writeI32(struct.includeRules.size());
          for (Map.Entry<String, Map<String,Set<String>>> _iter219 : struct.includeRules.entrySet())
          {
            oprot.writeString(_iter219.getKey());
            {
              oprot.writeI32(_iter219.getValue().size());
              for (Map.Entry<String, Set<String>> _iter220 : _iter219.getValue().entrySet())
              {
                oprot.writeString(_iter220.getKey());
                {
                  oprot.writeI32(_iter220.getValue().size());
                  for (String _iter221 : _iter220.getValue())
                  {
                    oprot.writeString(_iter221);
                  }
                }
              }
            }
          }
        }
      }
      if (struct.isSetExcludeRules()) {
        {
          oprot.writeI32(struct.excludeRules.size());
          for (Map.Entry<String, Map<String,Set<String>>> _iter222 : struct.excludeRules.entrySet())
          {
            oprot.writeString(_iter222.getKey());
            {
              oprot.writeI32(_iter222.getValue().size());
              for (Map.Entry<String, Set<String>> _iter223 : _iter222.getValue().entrySet())
              {
                oprot.writeString(_iter223.getKey());
                {
                  oprot.writeI32(_iter223.getValue().size());
                  for (String _iter224 : _iter223.getValue())
                  {
                    oprot.writeString(_iter224);
                  }
                }
              }
            }
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, IFCExportOptions struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.repositoryPattern = iprot.readString();
        struct.setRepositoryPatternIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list225 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.filePatterns = new ArrayList<String>(_list225.size);
          String _elem226;
          for (int _i227 = 0; _i227 < _list225.size; ++_i227)
          {
            _elem226 = iprot.readString();
            struct.filePatterns.add(_elem226);
          }
        }
        struct.setFilePatternsIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TMap _map228 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.MAP, iprot.readI32());
          struct.includeRules = new HashMap<String,Map<String,Set<String>>>(2*_map228.size);
          String _key229;
          Map<String,Set<String>> _val230;
          for (int _i231 = 0; _i231 < _map228.size; ++_i231)
          {
            _key229 = iprot.readString();
            {
              org.apache.thrift.protocol.TMap _map232 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.SET, iprot.readI32());
              _val230 = new HashMap<String,Set<String>>(2*_map232.size);
              String _key233;
              Set<String> _val234;
              for (int _i235 = 0; _i235 < _map232.size; ++_i235)
              {
                _key233 = iprot.readString();
                {
                  org.apache.thrift.protocol.TSet _set236 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                  _val234 = new HashSet<String>(2*_set236.size);
                  String _elem237;
                  for (int _i238 = 0; _i238 < _set236.size; ++_i238)
                  {
                    _elem237 = iprot.readString();
                    _val234.add(_elem237);
                  }
                }
                _val230.put(_key233, _val234);
              }
            }
            struct.includeRules.put(_key229, _val230);
          }
        }
        struct.setIncludeRulesIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TMap _map239 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.MAP, iprot.readI32());
          struct.excludeRules = new HashMap<String,Map<String,Set<String>>>(2*_map239.size);
          String _key240;
          Map<String,Set<String>> _val241;
          for (int _i242 = 0; _i242 < _map239.size; ++_i242)
          {
            _key240 = iprot.readString();
            {
              org.apache.thrift.protocol.TMap _map243 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.SET, iprot.readI32());
              _val241 = new HashMap<String,Set<String>>(2*_map243.size);
              String _key244;
              Set<String> _val245;
              for (int _i246 = 0; _i246 < _map243.size; ++_i246)
              {
                _key244 = iprot.readString();
                {
                  org.apache.thrift.protocol.TSet _set247 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                  _val245 = new HashSet<String>(2*_set247.size);
                  String _elem248;
                  for (int _i249 = 0; _i249 < _set247.size; ++_i249)
                  {
                    _elem248 = iprot.readString();
                    _val245.add(_elem248);
                  }
                }
                _val241.put(_key244, _val245);
              }
            }
            struct.excludeRules.put(_key240, _val241);
          }
        }
        struct.setExcludeRulesIsSet(true);
      }
    }
  }

}

