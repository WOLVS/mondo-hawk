//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


//HELPER FUNCTIONS AND STRUCTURES

Hawk_createInstance_args = function(args) {
  this.name = null;
  this.backend = null;
  this.minimumDelayMillis = null;
  this.maximumDelayMillis = null;
  this.enabledPlugins = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field name is unset!');
    }
    if (args.backend !== undefined && args.backend !== null) {
      this.backend = args.backend;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field backend is unset!');
    }
    if (args.minimumDelayMillis !== undefined && args.minimumDelayMillis !== null) {
      this.minimumDelayMillis = args.minimumDelayMillis;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field minimumDelayMillis is unset!');
    }
    if (args.maximumDelayMillis !== undefined && args.maximumDelayMillis !== null) {
      this.maximumDelayMillis = args.maximumDelayMillis;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field maximumDelayMillis is unset!');
    }
    if (args.enabledPlugins !== undefined && args.enabledPlugins !== null) {
      this.enabledPlugins = Thrift.copyList(args.enabledPlugins, [null]);
    }
  }
};
Hawk_createInstance_args.prototype = {};
Hawk_createInstance_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.backend = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.minimumDelayMillis = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.maximumDelayMillis = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size226 = 0;
        var _rtmp3230;
        this.enabledPlugins = [];
        var _etype229 = 0;
        _rtmp3230 = input.readListBegin();
        _etype229 = _rtmp3230.etype;
        _size226 = _rtmp3230.size;
        for (var _i231 = 0; _i231 < _size226; ++_i231)
        {
          var elem232 = null;
          elem232 = input.readString().value;
          this.enabledPlugins.push(elem232);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_createInstance_args.prototype.write = function(output) {
  output.writeStructBegin('Hawk_createInstance_args');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.backend !== null && this.backend !== undefined) {
    output.writeFieldBegin('backend', Thrift.Type.STRING, 2);
    output.writeString(this.backend);
    output.writeFieldEnd();
  }
  if (this.minimumDelayMillis !== null && this.minimumDelayMillis !== undefined) {
    output.writeFieldBegin('minimumDelayMillis', Thrift.Type.I32, 3);
    output.writeI32(this.minimumDelayMillis);
    output.writeFieldEnd();
  }
  if (this.maximumDelayMillis !== null && this.maximumDelayMillis !== undefined) {
    output.writeFieldBegin('maximumDelayMillis', Thrift.Type.I32, 4);
    output.writeI32(this.maximumDelayMillis);
    output.writeFieldEnd();
  }
  if (this.enabledPlugins !== null && this.enabledPlugins !== undefined) {
    output.writeFieldBegin('enabledPlugins', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRING, this.enabledPlugins.length);
    for (var iter233 in this.enabledPlugins)
    {
      if (this.enabledPlugins.hasOwnProperty(iter233))
      {
        iter233 = this.enabledPlugins[iter233];
        output.writeString(iter233);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_createInstance_result = function(args) {
};
Hawk_createInstance_result.prototype = {};
Hawk_createInstance_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_createInstance_result.prototype.write = function(output) {
  output.writeStructBegin('Hawk_createInstance_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_listBackends_args = function(args) {
};
Hawk_listBackends_args.prototype = {};
Hawk_listBackends_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_listBackends_args.prototype.write = function(output) {
  output.writeStructBegin('Hawk_listBackends_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_listBackends_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
  }
};
Hawk_listBackends_result.prototype = {};
Hawk_listBackends_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size234 = 0;
        var _rtmp3238;
        this.success = [];
        var _etype237 = 0;
        _rtmp3238 = input.readListBegin();
        _etype237 = _rtmp3238.etype;
        _size234 = _rtmp3238.size;
        for (var _i239 = 0; _i239 < _size234; ++_i239)
        {
          var elem240 = null;
          elem240 = input.readString().value;
          this.success.push(elem240);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_listBackends_result.prototype.write = function(output) {
  output.writeStructBegin('Hawk_listBackends_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter241 in this.success)
    {
      if (this.success.hasOwnProperty(iter241))
      {
        iter241 = this.success[iter241];
        output.writeString(iter241);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_listPlugins_args = function(args) {
};
Hawk_listPlugins_args.prototype = {};
Hawk_listPlugins_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_listPlugins_args.prototype.write = function(output) {
  output.writeStructBegin('Hawk_listPlugins_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_listPlugins_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
  }
};
Hawk_listPlugins_result.prototype = {};
Hawk_listPlugins_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size242 = 0;
        var _rtmp3246;
        this.success = [];
        var _etype245 = 0;
        _rtmp3246 = input.readListBegin();
        _etype245 = _rtmp3246.etype;
        _size242 = _rtmp3246.size;
        for (var _i247 = 0; _i247 < _size242; ++_i247)
        {
          var elem248 = null;
          elem248 = input.readString().value;
          this.success.push(elem248);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_listPlugins_result.prototype.write = function(output) {
  output.writeStructBegin('Hawk_listPlugins_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter249 in this.success)
    {
      if (this.success.hasOwnProperty(iter249))
      {
        iter249 = this.success[iter249];
        output.writeString(iter249);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_listInstances_args = function(args) {
};
Hawk_listInstances_args.prototype = {};
Hawk_listInstances_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_listInstances_args.prototype.write = function(output) {
  output.writeStructBegin('Hawk_listInstances_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_listInstances_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [HawkInstance]);
    }
  }
};
Hawk_listInstances_result.prototype = {};
Hawk_listInstances_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size250 = 0;
        var _rtmp3254;
        this.success = [];
        var _etype253 = 0;
        _rtmp3254 = input.readListBegin();
        _etype253 = _rtmp3254.etype;
        _size250 = _rtmp3254.size;
        for (var _i255 = 0; _i255 < _size250; ++_i255)
        {
          var elem256 = null;
          elem256 = new HawkInstance();
          elem256.read(input);
          this.success.push(elem256);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_listInstances_result.prototype.write = function(output) {
  output.writeStructBegin('Hawk_listInstances_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter257 in this.success)
    {
      if (this.success.hasOwnProperty(iter257))
      {
        iter257 = this.success[iter257];
        iter257.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_removeInstance_args = function(args) {
  this.name = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field name is unset!');
    }
  }
};
Hawk_removeInstance_args.prototype = {};
Hawk_removeInstance_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_removeInstance_args.prototype.write = function(output) {
  output.writeStructBegin('Hawk_removeInstance_args');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_removeInstance_result = function(args) {
  this.err1 = null;
  if (args instanceof HawkInstanceNotFound) {
    this.err1 = args;
    return;
  }
  if (args) {
    if (args.err1 !== undefined && args.err1 !== null) {
      this.err1 = args.err1;
    }
  }
};
Hawk_removeInstance_result.prototype = {};
Hawk_removeInstance_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err1 = new HawkInstanceNotFound();
        this.err1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_removeInstance_result.prototype.write = function(output) {
  output.writeStructBegin('Hawk_removeInstance_result');
  if (this.err1 !== null && this.err1 !== undefined) {
    output.writeFieldBegin('err1', Thrift.Type.STRUCT, 1);
    this.err1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_startInstance_args = function(args) {
  this.name = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field name is unset!');
    }
  }
};
Hawk_startInstance_args.prototype = {};
Hawk_startInstance_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_startInstance_args.prototype.write = function(output) {
  output.writeStructBegin('Hawk_startInstance_args');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_startInstance_result = function(args) {
  this.err1 = null;
  if (args instanceof HawkInstanceNotFound) {
    this.err1 = args;
    return;
  }
  if (args) {
    if (args.err1 !== undefined && args.err1 !== null) {
      this.err1 = args.err1;
    }
  }
};
Hawk_startInstance_result.prototype = {};
Hawk_startInstance_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err1 = new HawkInstanceNotFound();
        this.err1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_startInstance_result.prototype.write = function(output) {
  output.writeStructBegin('Hawk_startInstance_result');
  if (this.err1 !== null && this.err1 !== undefined) {
    output.writeFieldBegin('err1', Thrift.Type.STRUCT, 1);
    this.err1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_stopInstance_args = function(args) {
  this.name = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field name is unset!');
    }
  }
};
Hawk_stopInstance_args.prototype = {};
Hawk_stopInstance_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_stopInstance_args.prototype.write = function(output) {
  output.writeStructBegin('Hawk_stopInstance_args');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_stopInstance_result = function(args) {
  this.err1 = null;
  this.err2 = null;
  if (args instanceof HawkInstanceNotFound) {
    this.err1 = args;
    return;
  }
  if (args instanceof HawkInstanceNotRunning) {
    this.err2 = args;
    return;
  }
  if (args) {
    if (args.err1 !== undefined && args.err1 !== null) {
      this.err1 = args.err1;
    }
    if (args.err2 !== undefined && args.err2 !== null) {
      this.err2 = args.err2;
    }
  }
};
Hawk_stopInstance_result.prototype = {};
Hawk_stopInstance_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err1 = new HawkInstanceNotFound();
        this.err1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.err2 = new HawkInstanceNotRunning();
        this.err2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_stopInstance_result.prototype.write = function(output) {
  output.writeStructBegin('Hawk_stopInstance_result');
  if (this.err1 !== null && this.err1 !== undefined) {
    output.writeFieldBegin('err1', Thrift.Type.STRUCT, 1);
    this.err1.write(output);
    output.writeFieldEnd();
  }
  if (this.err2 !== null && this.err2 !== undefined) {
    output.writeFieldBegin('err2', Thrift.Type.STRUCT, 2);
    this.err2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_syncInstance_args = function(args) {
  this.name = null;
  this.blockUntilDone = false;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field name is unset!');
    }
    if (args.blockUntilDone !== undefined && args.blockUntilDone !== null) {
      this.blockUntilDone = args.blockUntilDone;
    }
  }
};
Hawk_syncInstance_args.prototype = {};
Hawk_syncInstance_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.blockUntilDone = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_syncInstance_args.prototype.write = function(output) {
  output.writeStructBegin('Hawk_syncInstance_args');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.blockUntilDone !== null && this.blockUntilDone !== undefined) {
    output.writeFieldBegin('blockUntilDone', Thrift.Type.BOOL, 2);
    output.writeBool(this.blockUntilDone);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_syncInstance_result = function(args) {
  this.err1 = null;
  this.err2 = null;
  if (args instanceof HawkInstanceNotFound) {
    this.err1 = args;
    return;
  }
  if (args instanceof HawkInstanceNotRunning) {
    this.err2 = args;
    return;
  }
  if (args) {
    if (args.err1 !== undefined && args.err1 !== null) {
      this.err1 = args.err1;
    }
    if (args.err2 !== undefined && args.err2 !== null) {
      this.err2 = args.err2;
    }
  }
};
Hawk_syncInstance_result.prototype = {};
Hawk_syncInstance_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err1 = new HawkInstanceNotFound();
        this.err1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.err2 = new HawkInstanceNotRunning();
        this.err2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_syncInstance_result.prototype.write = function(output) {
  output.writeStructBegin('Hawk_syncInstance_result');
  if (this.err1 !== null && this.err1 !== undefined) {
    output.writeFieldBegin('err1', Thrift.Type.STRUCT, 1);
    this.err1.write(output);
    output.writeFieldEnd();
  }
  if (this.err2 !== null && this.err2 !== undefined) {
    output.writeFieldBegin('err2', Thrift.Type.STRUCT, 2);
    this.err2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_registerMetamodels_args = function(args) {
  this.name = null;
  this.metamodel = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field name is unset!');
    }
    if (args.metamodel !== undefined && args.metamodel !== null) {
      this.metamodel = Thrift.copyList(args.metamodel, [File]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field metamodel is unset!');
    }
  }
};
Hawk_registerMetamodels_args.prototype = {};
Hawk_registerMetamodels_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size258 = 0;
        var _rtmp3262;
        this.metamodel = [];
        var _etype261 = 0;
        _rtmp3262 = input.readListBegin();
        _etype261 = _rtmp3262.etype;
        _size258 = _rtmp3262.size;
        for (var _i263 = 0; _i263 < _size258; ++_i263)
        {
          var elem264 = null;
          elem264 = new File();
          elem264.read(input);
          this.metamodel.push(elem264);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_registerMetamodels_args.prototype.write = function(output) {
  output.writeStructBegin('Hawk_registerMetamodels_args');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.metamodel !== null && this.metamodel !== undefined) {
    output.writeFieldBegin('metamodel', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.metamodel.length);
    for (var iter265 in this.metamodel)
    {
      if (this.metamodel.hasOwnProperty(iter265))
      {
        iter265 = this.metamodel[iter265];
        iter265.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_registerMetamodels_result = function(args) {
  this.err1 = null;
  this.err2 = null;
  this.err3 = null;
  if (args instanceof HawkInstanceNotFound) {
    this.err1 = args;
    return;
  }
  if (args instanceof InvalidMetamodel) {
    this.err2 = args;
    return;
  }
  if (args instanceof HawkInstanceNotRunning) {
    this.err3 = args;
    return;
  }
  if (args) {
    if (args.err1 !== undefined && args.err1 !== null) {
      this.err1 = args.err1;
    }
    if (args.err2 !== undefined && args.err2 !== null) {
      this.err2 = args.err2;
    }
    if (args.err3 !== undefined && args.err3 !== null) {
      this.err3 = args.err3;
    }
  }
};
Hawk_registerMetamodels_result.prototype = {};
Hawk_registerMetamodels_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err1 = new HawkInstanceNotFound();
        this.err1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.err2 = new InvalidMetamodel();
        this.err2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.err3 = new HawkInstanceNotRunning();
        this.err3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_registerMetamodels_result.prototype.write = function(output) {
  output.writeStructBegin('Hawk_registerMetamodels_result');
  if (this.err1 !== null && this.err1 !== undefined) {
    output.writeFieldBegin('err1', Thrift.Type.STRUCT, 1);
    this.err1.write(output);
    output.writeFieldEnd();
  }
  if (this.err2 !== null && this.err2 !== undefined) {
    output.writeFieldBegin('err2', Thrift.Type.STRUCT, 2);
    this.err2.write(output);
    output.writeFieldEnd();
  }
  if (this.err3 !== null && this.err3 !== undefined) {
    output.writeFieldBegin('err3', Thrift.Type.STRUCT, 3);
    this.err3.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_unregisterMetamodels_args = function(args) {
  this.name = null;
  this.metamodel = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field name is unset!');
    }
    if (args.metamodel !== undefined && args.metamodel !== null) {
      this.metamodel = Thrift.copyList(args.metamodel, [null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field metamodel is unset!');
    }
  }
};
Hawk_unregisterMetamodels_args.prototype = {};
Hawk_unregisterMetamodels_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size266 = 0;
        var _rtmp3270;
        this.metamodel = [];
        var _etype269 = 0;
        _rtmp3270 = input.readListBegin();
        _etype269 = _rtmp3270.etype;
        _size266 = _rtmp3270.size;
        for (var _i271 = 0; _i271 < _size266; ++_i271)
        {
          var elem272 = null;
          elem272 = input.readString().value;
          this.metamodel.push(elem272);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_unregisterMetamodels_args.prototype.write = function(output) {
  output.writeStructBegin('Hawk_unregisterMetamodels_args');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.metamodel !== null && this.metamodel !== undefined) {
    output.writeFieldBegin('metamodel', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.metamodel.length);
    for (var iter273 in this.metamodel)
    {
      if (this.metamodel.hasOwnProperty(iter273))
      {
        iter273 = this.metamodel[iter273];
        output.writeString(iter273);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_unregisterMetamodels_result = function(args) {
  this.err1 = null;
  this.err2 = null;
  if (args instanceof HawkInstanceNotFound) {
    this.err1 = args;
    return;
  }
  if (args instanceof HawkInstanceNotRunning) {
    this.err2 = args;
    return;
  }
  if (args) {
    if (args.err1 !== undefined && args.err1 !== null) {
      this.err1 = args.err1;
    }
    if (args.err2 !== undefined && args.err2 !== null) {
      this.err2 = args.err2;
    }
  }
};
Hawk_unregisterMetamodels_result.prototype = {};
Hawk_unregisterMetamodels_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err1 = new HawkInstanceNotFound();
        this.err1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.err2 = new HawkInstanceNotRunning();
        this.err2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_unregisterMetamodels_result.prototype.write = function(output) {
  output.writeStructBegin('Hawk_unregisterMetamodels_result');
  if (this.err1 !== null && this.err1 !== undefined) {
    output.writeFieldBegin('err1', Thrift.Type.STRUCT, 1);
    this.err1.write(output);
    output.writeFieldEnd();
  }
  if (this.err2 !== null && this.err2 !== undefined) {
    output.writeFieldBegin('err2', Thrift.Type.STRUCT, 2);
    this.err2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_listMetamodels_args = function(args) {
  this.name = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field name is unset!');
    }
  }
};
Hawk_listMetamodels_args.prototype = {};
Hawk_listMetamodels_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_listMetamodels_args.prototype.write = function(output) {
  output.writeStructBegin('Hawk_listMetamodels_args');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_listMetamodels_result = function(args) {
  this.success = null;
  this.err1 = null;
  this.err2 = null;
  if (args instanceof HawkInstanceNotFound) {
    this.err1 = args;
    return;
  }
  if (args instanceof HawkInstanceNotRunning) {
    this.err2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.err1 !== undefined && args.err1 !== null) {
      this.err1 = args.err1;
    }
    if (args.err2 !== undefined && args.err2 !== null) {
      this.err2 = args.err2;
    }
  }
};
Hawk_listMetamodels_result.prototype = {};
Hawk_listMetamodels_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size274 = 0;
        var _rtmp3278;
        this.success = [];
        var _etype277 = 0;
        _rtmp3278 = input.readListBegin();
        _etype277 = _rtmp3278.etype;
        _size274 = _rtmp3278.size;
        for (var _i279 = 0; _i279 < _size274; ++_i279)
        {
          var elem280 = null;
          elem280 = input.readString().value;
          this.success.push(elem280);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err1 = new HawkInstanceNotFound();
        this.err1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.err2 = new HawkInstanceNotRunning();
        this.err2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_listMetamodels_result.prototype.write = function(output) {
  output.writeStructBegin('Hawk_listMetamodels_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter281 in this.success)
    {
      if (this.success.hasOwnProperty(iter281))
      {
        iter281 = this.success[iter281];
        output.writeString(iter281);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.err1 !== null && this.err1 !== undefined) {
    output.writeFieldBegin('err1', Thrift.Type.STRUCT, 1);
    this.err1.write(output);
    output.writeFieldEnd();
  }
  if (this.err2 !== null && this.err2 !== undefined) {
    output.writeFieldBegin('err2', Thrift.Type.STRUCT, 2);
    this.err2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_listTypeNames_args = function(args) {
  this.hawkInstanceName = null;
  this.metamodelURI = null;
  if (args) {
    if (args.hawkInstanceName !== undefined && args.hawkInstanceName !== null) {
      this.hawkInstanceName = args.hawkInstanceName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field hawkInstanceName is unset!');
    }
    if (args.metamodelURI !== undefined && args.metamodelURI !== null) {
      this.metamodelURI = args.metamodelURI;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field metamodelURI is unset!');
    }
  }
};
Hawk_listTypeNames_args.prototype = {};
Hawk_listTypeNames_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.hawkInstanceName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.metamodelURI = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_listTypeNames_args.prototype.write = function(output) {
  output.writeStructBegin('Hawk_listTypeNames_args');
  if (this.hawkInstanceName !== null && this.hawkInstanceName !== undefined) {
    output.writeFieldBegin('hawkInstanceName', Thrift.Type.STRING, 1);
    output.writeString(this.hawkInstanceName);
    output.writeFieldEnd();
  }
  if (this.metamodelURI !== null && this.metamodelURI !== undefined) {
    output.writeFieldBegin('metamodelURI', Thrift.Type.STRING, 2);
    output.writeString(this.metamodelURI);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_listTypeNames_result = function(args) {
  this.success = null;
  this.err1 = null;
  this.err2 = null;
  this.err3 = null;
  if (args instanceof HawkInstanceNotFound) {
    this.err1 = args;
    return;
  }
  if (args instanceof HawkInstanceNotRunning) {
    this.err2 = args;
    return;
  }
  if (args instanceof HawkMetamodelNotFound) {
    this.err3 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.err1 !== undefined && args.err1 !== null) {
      this.err1 = args.err1;
    }
    if (args.err2 !== undefined && args.err2 !== null) {
      this.err2 = args.err2;
    }
    if (args.err3 !== undefined && args.err3 !== null) {
      this.err3 = args.err3;
    }
  }
};
Hawk_listTypeNames_result.prototype = {};
Hawk_listTypeNames_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size282 = 0;
        var _rtmp3286;
        this.success = [];
        var _etype285 = 0;
        _rtmp3286 = input.readListBegin();
        _etype285 = _rtmp3286.etype;
        _size282 = _rtmp3286.size;
        for (var _i287 = 0; _i287 < _size282; ++_i287)
        {
          var elem288 = null;
          elem288 = input.readString().value;
          this.success.push(elem288);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err1 = new HawkInstanceNotFound();
        this.err1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.err2 = new HawkInstanceNotRunning();
        this.err2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.err3 = new HawkMetamodelNotFound();
        this.err3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_listTypeNames_result.prototype.write = function(output) {
  output.writeStructBegin('Hawk_listTypeNames_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter289 in this.success)
    {
      if (this.success.hasOwnProperty(iter289))
      {
        iter289 = this.success[iter289];
        output.writeString(iter289);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.err1 !== null && this.err1 !== undefined) {
    output.writeFieldBegin('err1', Thrift.Type.STRUCT, 1);
    this.err1.write(output);
    output.writeFieldEnd();
  }
  if (this.err2 !== null && this.err2 !== undefined) {
    output.writeFieldBegin('err2', Thrift.Type.STRUCT, 2);
    this.err2.write(output);
    output.writeFieldEnd();
  }
  if (this.err3 !== null && this.err3 !== undefined) {
    output.writeFieldBegin('err3', Thrift.Type.STRUCT, 3);
    this.err3.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_listTypes_args = function(args) {
  this.hawkInstanceName = null;
  this.metamodelURI = null;
  if (args) {
    if (args.hawkInstanceName !== undefined && args.hawkInstanceName !== null) {
      this.hawkInstanceName = args.hawkInstanceName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field hawkInstanceName is unset!');
    }
    if (args.metamodelURI !== undefined && args.metamodelURI !== null) {
      this.metamodelURI = args.metamodelURI;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field metamodelURI is unset!');
    }
  }
};
Hawk_listTypes_args.prototype = {};
Hawk_listTypes_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.hawkInstanceName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.metamodelURI = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_listTypes_args.prototype.write = function(output) {
  output.writeStructBegin('Hawk_listTypes_args');
  if (this.hawkInstanceName !== null && this.hawkInstanceName !== undefined) {
    output.writeFieldBegin('hawkInstanceName', Thrift.Type.STRING, 1);
    output.writeString(this.hawkInstanceName);
    output.writeFieldEnd();
  }
  if (this.metamodelURI !== null && this.metamodelURI !== undefined) {
    output.writeFieldBegin('metamodelURI', Thrift.Type.STRING, 2);
    output.writeString(this.metamodelURI);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_listTypes_result = function(args) {
  this.success = null;
  this.err1 = null;
  this.err2 = null;
  this.err3 = null;
  if (args instanceof HawkInstanceNotFound) {
    this.err1 = args;
    return;
  }
  if (args instanceof HawkInstanceNotRunning) {
    this.err2 = args;
    return;
  }
  if (args instanceof HawkMetamodelNotFound) {
    this.err3 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ModelElementType]);
    }
    if (args.err1 !== undefined && args.err1 !== null) {
      this.err1 = args.err1;
    }
    if (args.err2 !== undefined && args.err2 !== null) {
      this.err2 = args.err2;
    }
    if (args.err3 !== undefined && args.err3 !== null) {
      this.err3 = args.err3;
    }
  }
};
Hawk_listTypes_result.prototype = {};
Hawk_listTypes_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size290 = 0;
        var _rtmp3294;
        this.success = [];
        var _etype293 = 0;
        _rtmp3294 = input.readListBegin();
        _etype293 = _rtmp3294.etype;
        _size290 = _rtmp3294.size;
        for (var _i295 = 0; _i295 < _size290; ++_i295)
        {
          var elem296 = null;
          elem296 = new ModelElementType();
          elem296.read(input);
          this.success.push(elem296);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err1 = new HawkInstanceNotFound();
        this.err1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.err2 = new HawkInstanceNotRunning();
        this.err2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.err3 = new HawkMetamodelNotFound();
        this.err3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_listTypes_result.prototype.write = function(output) {
  output.writeStructBegin('Hawk_listTypes_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter297 in this.success)
    {
      if (this.success.hasOwnProperty(iter297))
      {
        iter297 = this.success[iter297];
        iter297.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.err1 !== null && this.err1 !== undefined) {
    output.writeFieldBegin('err1', Thrift.Type.STRUCT, 1);
    this.err1.write(output);
    output.writeFieldEnd();
  }
  if (this.err2 !== null && this.err2 !== undefined) {
    output.writeFieldBegin('err2', Thrift.Type.STRUCT, 2);
    this.err2.write(output);
    output.writeFieldEnd();
  }
  if (this.err3 !== null && this.err3 !== undefined) {
    output.writeFieldBegin('err3', Thrift.Type.STRUCT, 3);
    this.err3.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_fetchType_args = function(args) {
  this.hawkInstanceName = null;
  this.metamodelURI = null;
  this.typeName = null;
  if (args) {
    if (args.hawkInstanceName !== undefined && args.hawkInstanceName !== null) {
      this.hawkInstanceName = args.hawkInstanceName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field hawkInstanceName is unset!');
    }
    if (args.metamodelURI !== undefined && args.metamodelURI !== null) {
      this.metamodelURI = args.metamodelURI;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field metamodelURI is unset!');
    }
    if (args.typeName !== undefined && args.typeName !== null) {
      this.typeName = args.typeName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field typeName is unset!');
    }
  }
};
Hawk_fetchType_args.prototype = {};
Hawk_fetchType_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.hawkInstanceName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.metamodelURI = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.typeName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_fetchType_args.prototype.write = function(output) {
  output.writeStructBegin('Hawk_fetchType_args');
  if (this.hawkInstanceName !== null && this.hawkInstanceName !== undefined) {
    output.writeFieldBegin('hawkInstanceName', Thrift.Type.STRING, 1);
    output.writeString(this.hawkInstanceName);
    output.writeFieldEnd();
  }
  if (this.metamodelURI !== null && this.metamodelURI !== undefined) {
    output.writeFieldBegin('metamodelURI', Thrift.Type.STRING, 2);
    output.writeString(this.metamodelURI);
    output.writeFieldEnd();
  }
  if (this.typeName !== null && this.typeName !== undefined) {
    output.writeFieldBegin('typeName', Thrift.Type.STRING, 3);
    output.writeString(this.typeName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_fetchType_result = function(args) {
  this.success = null;
  this.err1 = null;
  this.err2 = null;
  this.err3 = null;
  this.err4 = null;
  if (args instanceof HawkInstanceNotFound) {
    this.err1 = args;
    return;
  }
  if (args instanceof HawkInstanceNotRunning) {
    this.err2 = args;
    return;
  }
  if (args instanceof HawkMetamodelNotFound) {
    this.err3 = args;
    return;
  }
  if (args instanceof HawkTypeNotFound) {
    this.err4 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ModelElementType(args.success);
    }
    if (args.err1 !== undefined && args.err1 !== null) {
      this.err1 = args.err1;
    }
    if (args.err2 !== undefined && args.err2 !== null) {
      this.err2 = args.err2;
    }
    if (args.err3 !== undefined && args.err3 !== null) {
      this.err3 = args.err3;
    }
    if (args.err4 !== undefined && args.err4 !== null) {
      this.err4 = args.err4;
    }
  }
};
Hawk_fetchType_result.prototype = {};
Hawk_fetchType_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ModelElementType();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err1 = new HawkInstanceNotFound();
        this.err1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.err2 = new HawkInstanceNotRunning();
        this.err2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.err3 = new HawkMetamodelNotFound();
        this.err3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.err4 = new HawkTypeNotFound();
        this.err4.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_fetchType_result.prototype.write = function(output) {
  output.writeStructBegin('Hawk_fetchType_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.err1 !== null && this.err1 !== undefined) {
    output.writeFieldBegin('err1', Thrift.Type.STRUCT, 1);
    this.err1.write(output);
    output.writeFieldEnd();
  }
  if (this.err2 !== null && this.err2 !== undefined) {
    output.writeFieldBegin('err2', Thrift.Type.STRUCT, 2);
    this.err2.write(output);
    output.writeFieldEnd();
  }
  if (this.err3 !== null && this.err3 !== undefined) {
    output.writeFieldBegin('err3', Thrift.Type.STRUCT, 3);
    this.err3.write(output);
    output.writeFieldEnd();
  }
  if (this.err4 !== null && this.err4 !== undefined) {
    output.writeFieldBegin('err4', Thrift.Type.STRUCT, 4);
    this.err4.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_listMetamodelParsers_args = function(args) {
  this.name = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field name is unset!');
    }
  }
};
Hawk_listMetamodelParsers_args.prototype = {};
Hawk_listMetamodelParsers_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_listMetamodelParsers_args.prototype.write = function(output) {
  output.writeStructBegin('Hawk_listMetamodelParsers_args');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_listMetamodelParsers_result = function(args) {
  this.success = null;
  this.err1 = null;
  this.err2 = null;
  if (args instanceof HawkInstanceNotFound) {
    this.err1 = args;
    return;
  }
  if (args instanceof HawkInstanceNotRunning) {
    this.err2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [MetamodelParserDetails]);
    }
    if (args.err1 !== undefined && args.err1 !== null) {
      this.err1 = args.err1;
    }
    if (args.err2 !== undefined && args.err2 !== null) {
      this.err2 = args.err2;
    }
  }
};
Hawk_listMetamodelParsers_result.prototype = {};
Hawk_listMetamodelParsers_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size298 = 0;
        var _rtmp3302;
        this.success = [];
        var _etype301 = 0;
        _rtmp3302 = input.readListBegin();
        _etype301 = _rtmp3302.etype;
        _size298 = _rtmp3302.size;
        for (var _i303 = 0; _i303 < _size298; ++_i303)
        {
          var elem304 = null;
          elem304 = new MetamodelParserDetails();
          elem304.read(input);
          this.success.push(elem304);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err1 = new HawkInstanceNotFound();
        this.err1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.err2 = new HawkInstanceNotRunning();
        this.err2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_listMetamodelParsers_result.prototype.write = function(output) {
  output.writeStructBegin('Hawk_listMetamodelParsers_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter305 in this.success)
    {
      if (this.success.hasOwnProperty(iter305))
      {
        iter305 = this.success[iter305];
        iter305.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.err1 !== null && this.err1 !== undefined) {
    output.writeFieldBegin('err1', Thrift.Type.STRUCT, 1);
    this.err1.write(output);
    output.writeFieldEnd();
  }
  if (this.err2 !== null && this.err2 !== undefined) {
    output.writeFieldBegin('err2', Thrift.Type.STRUCT, 2);
    this.err2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_listQueryLanguages_args = function(args) {
  this.name = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field name is unset!');
    }
  }
};
Hawk_listQueryLanguages_args.prototype = {};
Hawk_listQueryLanguages_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_listQueryLanguages_args.prototype.write = function(output) {
  output.writeStructBegin('Hawk_listQueryLanguages_args');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_listQueryLanguages_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
  }
};
Hawk_listQueryLanguages_result.prototype = {};
Hawk_listQueryLanguages_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size306 = 0;
        var _rtmp3310;
        this.success = [];
        var _etype309 = 0;
        _rtmp3310 = input.readListBegin();
        _etype309 = _rtmp3310.etype;
        _size306 = _rtmp3310.size;
        for (var _i311 = 0; _i311 < _size306; ++_i311)
        {
          var elem312 = null;
          elem312 = input.readString().value;
          this.success.push(elem312);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_listQueryLanguages_result.prototype.write = function(output) {
  output.writeStructBegin('Hawk_listQueryLanguages_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter313 in this.success)
    {
      if (this.success.hasOwnProperty(iter313))
      {
        iter313 = this.success[iter313];
        output.writeString(iter313);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_query_args = function(args) {
  this.name = null;
  this.query = null;
  this.language = null;
  this.options = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field name is unset!');
    }
    if (args.query !== undefined && args.query !== null) {
      this.query = args.query;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field query is unset!');
    }
    if (args.language !== undefined && args.language !== null) {
      this.language = args.language;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field language is unset!');
    }
    if (args.options !== undefined && args.options !== null) {
      this.options = new HawkQueryOptions(args.options);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field options is unset!');
    }
  }
};
Hawk_query_args.prototype = {};
Hawk_query_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.query = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.language = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.options = new HawkQueryOptions();
        this.options.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_query_args.prototype.write = function(output) {
  output.writeStructBegin('Hawk_query_args');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.query !== null && this.query !== undefined) {
    output.writeFieldBegin('query', Thrift.Type.STRING, 2);
    output.writeString(this.query);
    output.writeFieldEnd();
  }
  if (this.language !== null && this.language !== undefined) {
    output.writeFieldBegin('language', Thrift.Type.STRING, 3);
    output.writeString(this.language);
    output.writeFieldEnd();
  }
  if (this.options !== null && this.options !== undefined) {
    output.writeFieldBegin('options', Thrift.Type.STRUCT, 4);
    this.options.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_query_result = function(args) {
  this.success = null;
  this.err1 = null;
  this.err2 = null;
  this.err3 = null;
  this.err4 = null;
  this.err5 = null;
  if (args instanceof HawkInstanceNotFound) {
    this.err1 = args;
    return;
  }
  if (args instanceof HawkInstanceNotRunning) {
    this.err2 = args;
    return;
  }
  if (args instanceof UnknownQueryLanguage) {
    this.err3 = args;
    return;
  }
  if (args instanceof InvalidQuery) {
    this.err4 = args;
    return;
  }
  if (args instanceof FailedQuery) {
    this.err5 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new QueryResult(args.success);
    }
    if (args.err1 !== undefined && args.err1 !== null) {
      this.err1 = args.err1;
    }
    if (args.err2 !== undefined && args.err2 !== null) {
      this.err2 = args.err2;
    }
    if (args.err3 !== undefined && args.err3 !== null) {
      this.err3 = args.err3;
    }
    if (args.err4 !== undefined && args.err4 !== null) {
      this.err4 = args.err4;
    }
    if (args.err5 !== undefined && args.err5 !== null) {
      this.err5 = args.err5;
    }
  }
};
Hawk_query_result.prototype = {};
Hawk_query_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new QueryResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err1 = new HawkInstanceNotFound();
        this.err1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.err2 = new HawkInstanceNotRunning();
        this.err2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.err3 = new UnknownQueryLanguage();
        this.err3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.err4 = new InvalidQuery();
        this.err4.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.err5 = new FailedQuery();
        this.err5.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_query_result.prototype.write = function(output) {
  output.writeStructBegin('Hawk_query_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.err1 !== null && this.err1 !== undefined) {
    output.writeFieldBegin('err1', Thrift.Type.STRUCT, 1);
    this.err1.write(output);
    output.writeFieldEnd();
  }
  if (this.err2 !== null && this.err2 !== undefined) {
    output.writeFieldBegin('err2', Thrift.Type.STRUCT, 2);
    this.err2.write(output);
    output.writeFieldEnd();
  }
  if (this.err3 !== null && this.err3 !== undefined) {
    output.writeFieldBegin('err3', Thrift.Type.STRUCT, 3);
    this.err3.write(output);
    output.writeFieldEnd();
  }
  if (this.err4 !== null && this.err4 !== undefined) {
    output.writeFieldBegin('err4', Thrift.Type.STRUCT, 4);
    this.err4.write(output);
    output.writeFieldEnd();
  }
  if (this.err5 !== null && this.err5 !== undefined) {
    output.writeFieldBegin('err5', Thrift.Type.STRUCT, 5);
    this.err5.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_timedQuery_args = function(args) {
  this.name = null;
  this.query = null;
  this.language = null;
  this.options = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field name is unset!');
    }
    if (args.query !== undefined && args.query !== null) {
      this.query = args.query;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field query is unset!');
    }
    if (args.language !== undefined && args.language !== null) {
      this.language = args.language;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field language is unset!');
    }
    if (args.options !== undefined && args.options !== null) {
      this.options = new HawkQueryOptions(args.options);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field options is unset!');
    }
  }
};
Hawk_timedQuery_args.prototype = {};
Hawk_timedQuery_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.query = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.language = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.options = new HawkQueryOptions();
        this.options.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_timedQuery_args.prototype.write = function(output) {
  output.writeStructBegin('Hawk_timedQuery_args');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.query !== null && this.query !== undefined) {
    output.writeFieldBegin('query', Thrift.Type.STRING, 2);
    output.writeString(this.query);
    output.writeFieldEnd();
  }
  if (this.language !== null && this.language !== undefined) {
    output.writeFieldBegin('language', Thrift.Type.STRING, 3);
    output.writeString(this.language);
    output.writeFieldEnd();
  }
  if (this.options !== null && this.options !== undefined) {
    output.writeFieldBegin('options', Thrift.Type.STRUCT, 4);
    this.options.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_timedQuery_result = function(args) {
  this.success = null;
  this.err1 = null;
  this.err2 = null;
  this.err3 = null;
  this.err4 = null;
  this.err5 = null;
  if (args instanceof HawkInstanceNotFound) {
    this.err1 = args;
    return;
  }
  if (args instanceof HawkInstanceNotRunning) {
    this.err2 = args;
    return;
  }
  if (args instanceof UnknownQueryLanguage) {
    this.err3 = args;
    return;
  }
  if (args instanceof InvalidQuery) {
    this.err4 = args;
    return;
  }
  if (args instanceof FailedQuery) {
    this.err5 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new QueryReport(args.success);
    }
    if (args.err1 !== undefined && args.err1 !== null) {
      this.err1 = args.err1;
    }
    if (args.err2 !== undefined && args.err2 !== null) {
      this.err2 = args.err2;
    }
    if (args.err3 !== undefined && args.err3 !== null) {
      this.err3 = args.err3;
    }
    if (args.err4 !== undefined && args.err4 !== null) {
      this.err4 = args.err4;
    }
    if (args.err5 !== undefined && args.err5 !== null) {
      this.err5 = args.err5;
    }
  }
};
Hawk_timedQuery_result.prototype = {};
Hawk_timedQuery_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new QueryReport();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err1 = new HawkInstanceNotFound();
        this.err1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.err2 = new HawkInstanceNotRunning();
        this.err2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.err3 = new UnknownQueryLanguage();
        this.err3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.err4 = new InvalidQuery();
        this.err4.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.err5 = new FailedQuery();
        this.err5.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_timedQuery_result.prototype.write = function(output) {
  output.writeStructBegin('Hawk_timedQuery_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.err1 !== null && this.err1 !== undefined) {
    output.writeFieldBegin('err1', Thrift.Type.STRUCT, 1);
    this.err1.write(output);
    output.writeFieldEnd();
  }
  if (this.err2 !== null && this.err2 !== undefined) {
    output.writeFieldBegin('err2', Thrift.Type.STRUCT, 2);
    this.err2.write(output);
    output.writeFieldEnd();
  }
  if (this.err3 !== null && this.err3 !== undefined) {
    output.writeFieldBegin('err3', Thrift.Type.STRUCT, 3);
    this.err3.write(output);
    output.writeFieldEnd();
  }
  if (this.err4 !== null && this.err4 !== undefined) {
    output.writeFieldBegin('err4', Thrift.Type.STRUCT, 4);
    this.err4.write(output);
    output.writeFieldEnd();
  }
  if (this.err5 !== null && this.err5 !== undefined) {
    output.writeFieldBegin('err5', Thrift.Type.STRUCT, 5);
    this.err5.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_resolveProxies_args = function(args) {
  this.name = null;
  this.ids = null;
  this.options = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field name is unset!');
    }
    if (args.ids !== undefined && args.ids !== null) {
      this.ids = Thrift.copyList(args.ids, [null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field ids is unset!');
    }
    if (args.options !== undefined && args.options !== null) {
      this.options = new HawkQueryOptions(args.options);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field options is unset!');
    }
  }
};
Hawk_resolveProxies_args.prototype = {};
Hawk_resolveProxies_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size314 = 0;
        var _rtmp3318;
        this.ids = [];
        var _etype317 = 0;
        _rtmp3318 = input.readListBegin();
        _etype317 = _rtmp3318.etype;
        _size314 = _rtmp3318.size;
        for (var _i319 = 0; _i319 < _size314; ++_i319)
        {
          var elem320 = null;
          elem320 = input.readString().value;
          this.ids.push(elem320);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.options = new HawkQueryOptions();
        this.options.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_resolveProxies_args.prototype.write = function(output) {
  output.writeStructBegin('Hawk_resolveProxies_args');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.ids !== null && this.ids !== undefined) {
    output.writeFieldBegin('ids', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.ids.length);
    for (var iter321 in this.ids)
    {
      if (this.ids.hasOwnProperty(iter321))
      {
        iter321 = this.ids[iter321];
        output.writeString(iter321);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.options !== null && this.options !== undefined) {
    output.writeFieldBegin('options', Thrift.Type.STRUCT, 3);
    this.options.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_resolveProxies_result = function(args) {
  this.success = null;
  this.err1 = null;
  this.err2 = null;
  if (args instanceof HawkInstanceNotFound) {
    this.err1 = args;
    return;
  }
  if (args instanceof HawkInstanceNotRunning) {
    this.err2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ModelElement]);
    }
    if (args.err1 !== undefined && args.err1 !== null) {
      this.err1 = args.err1;
    }
    if (args.err2 !== undefined && args.err2 !== null) {
      this.err2 = args.err2;
    }
  }
};
Hawk_resolveProxies_result.prototype = {};
Hawk_resolveProxies_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size322 = 0;
        var _rtmp3326;
        this.success = [];
        var _etype325 = 0;
        _rtmp3326 = input.readListBegin();
        _etype325 = _rtmp3326.etype;
        _size322 = _rtmp3326.size;
        for (var _i327 = 0; _i327 < _size322; ++_i327)
        {
          var elem328 = null;
          elem328 = new ModelElement();
          elem328.read(input);
          this.success.push(elem328);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err1 = new HawkInstanceNotFound();
        this.err1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.err2 = new HawkInstanceNotRunning();
        this.err2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_resolveProxies_result.prototype.write = function(output) {
  output.writeStructBegin('Hawk_resolveProxies_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter329 in this.success)
    {
      if (this.success.hasOwnProperty(iter329))
      {
        iter329 = this.success[iter329];
        iter329.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.err1 !== null && this.err1 !== undefined) {
    output.writeFieldBegin('err1', Thrift.Type.STRUCT, 1);
    this.err1.write(output);
    output.writeFieldEnd();
  }
  if (this.err2 !== null && this.err2 !== undefined) {
    output.writeFieldBegin('err2', Thrift.Type.STRUCT, 2);
    this.err2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_asyncQuery_args = function(args) {
  this.name = null;
  this.query = null;
  this.language = null;
  this.options = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field name is unset!');
    }
    if (args.query !== undefined && args.query !== null) {
      this.query = args.query;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field query is unset!');
    }
    if (args.language !== undefined && args.language !== null) {
      this.language = args.language;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field language is unset!');
    }
    if (args.options !== undefined && args.options !== null) {
      this.options = new HawkQueryOptions(args.options);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field options is unset!');
    }
  }
};
Hawk_asyncQuery_args.prototype = {};
Hawk_asyncQuery_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.query = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.language = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.options = new HawkQueryOptions();
        this.options.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_asyncQuery_args.prototype.write = function(output) {
  output.writeStructBegin('Hawk_asyncQuery_args');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.query !== null && this.query !== undefined) {
    output.writeFieldBegin('query', Thrift.Type.STRING, 2);
    output.writeString(this.query);
    output.writeFieldEnd();
  }
  if (this.language !== null && this.language !== undefined) {
    output.writeFieldBegin('language', Thrift.Type.STRING, 3);
    output.writeString(this.language);
    output.writeFieldEnd();
  }
  if (this.options !== null && this.options !== undefined) {
    output.writeFieldBegin('options', Thrift.Type.STRUCT, 4);
    this.options.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_asyncQuery_result = function(args) {
  this.success = null;
  this.err1 = null;
  this.err2 = null;
  this.err3 = null;
  this.err4 = null;
  if (args instanceof HawkInstanceNotFound) {
    this.err1 = args;
    return;
  }
  if (args instanceof HawkInstanceNotRunning) {
    this.err2 = args;
    return;
  }
  if (args instanceof UnknownQueryLanguage) {
    this.err3 = args;
    return;
  }
  if (args instanceof InvalidQuery) {
    this.err4 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.err1 !== undefined && args.err1 !== null) {
      this.err1 = args.err1;
    }
    if (args.err2 !== undefined && args.err2 !== null) {
      this.err2 = args.err2;
    }
    if (args.err3 !== undefined && args.err3 !== null) {
      this.err3 = args.err3;
    }
    if (args.err4 !== undefined && args.err4 !== null) {
      this.err4 = args.err4;
    }
  }
};
Hawk_asyncQuery_result.prototype = {};
Hawk_asyncQuery_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err1 = new HawkInstanceNotFound();
        this.err1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.err2 = new HawkInstanceNotRunning();
        this.err2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.err3 = new UnknownQueryLanguage();
        this.err3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.err4 = new InvalidQuery();
        this.err4.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_asyncQuery_result.prototype.write = function(output) {
  output.writeStructBegin('Hawk_asyncQuery_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.err1 !== null && this.err1 !== undefined) {
    output.writeFieldBegin('err1', Thrift.Type.STRUCT, 1);
    this.err1.write(output);
    output.writeFieldEnd();
  }
  if (this.err2 !== null && this.err2 !== undefined) {
    output.writeFieldBegin('err2', Thrift.Type.STRUCT, 2);
    this.err2.write(output);
    output.writeFieldEnd();
  }
  if (this.err3 !== null && this.err3 !== undefined) {
    output.writeFieldBegin('err3', Thrift.Type.STRUCT, 3);
    this.err3.write(output);
    output.writeFieldEnd();
  }
  if (this.err4 !== null && this.err4 !== undefined) {
    output.writeFieldBegin('err4', Thrift.Type.STRUCT, 4);
    this.err4.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_cancelAsyncQuery_args = function(args) {
  this.queryID = null;
  if (args) {
    if (args.queryID !== undefined && args.queryID !== null) {
      this.queryID = args.queryID;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field queryID is unset!');
    }
  }
};
Hawk_cancelAsyncQuery_args.prototype = {};
Hawk_cancelAsyncQuery_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.queryID = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_cancelAsyncQuery_args.prototype.write = function(output) {
  output.writeStructBegin('Hawk_cancelAsyncQuery_args');
  if (this.queryID !== null && this.queryID !== undefined) {
    output.writeFieldBegin('queryID', Thrift.Type.STRING, 1);
    output.writeString(this.queryID);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_cancelAsyncQuery_result = function(args) {
};
Hawk_cancelAsyncQuery_result.prototype = {};
Hawk_cancelAsyncQuery_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_cancelAsyncQuery_result.prototype.write = function(output) {
  output.writeStructBegin('Hawk_cancelAsyncQuery_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_fetchAsyncQueryResults_args = function(args) {
  this.queryID = null;
  if (args) {
    if (args.queryID !== undefined && args.queryID !== null) {
      this.queryID = args.queryID;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field queryID is unset!');
    }
  }
};
Hawk_fetchAsyncQueryResults_args.prototype = {};
Hawk_fetchAsyncQueryResults_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.queryID = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_fetchAsyncQueryResults_args.prototype.write = function(output) {
  output.writeStructBegin('Hawk_fetchAsyncQueryResults_args');
  if (this.queryID !== null && this.queryID !== undefined) {
    output.writeFieldBegin('queryID', Thrift.Type.STRING, 1);
    output.writeString(this.queryID);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_fetchAsyncQueryResults_result = function(args) {
  this.success = null;
  this.err1 = null;
  this.err2 = null;
  if (args instanceof InvalidQuery) {
    this.err1 = args;
    return;
  }
  if (args instanceof FailedQuery) {
    this.err2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new QueryReport(args.success);
    }
    if (args.err1 !== undefined && args.err1 !== null) {
      this.err1 = args.err1;
    }
    if (args.err2 !== undefined && args.err2 !== null) {
      this.err2 = args.err2;
    }
  }
};
Hawk_fetchAsyncQueryResults_result.prototype = {};
Hawk_fetchAsyncQueryResults_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new QueryReport();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err1 = new InvalidQuery();
        this.err1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.err2 = new FailedQuery();
        this.err2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_fetchAsyncQueryResults_result.prototype.write = function(output) {
  output.writeStructBegin('Hawk_fetchAsyncQueryResults_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.err1 !== null && this.err1 !== undefined) {
    output.writeFieldBegin('err1', Thrift.Type.STRUCT, 1);
    this.err1.write(output);
    output.writeFieldEnd();
  }
  if (this.err2 !== null && this.err2 !== undefined) {
    output.writeFieldBegin('err2', Thrift.Type.STRUCT, 2);
    this.err2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_addRepository_args = function(args) {
  this.name = null;
  this.repo = null;
  this.credentials = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field name is unset!');
    }
    if (args.repo !== undefined && args.repo !== null) {
      this.repo = new Repository(args.repo);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field repo is unset!');
    }
    if (args.credentials !== undefined && args.credentials !== null) {
      this.credentials = new Credentials(args.credentials);
    }
  }
};
Hawk_addRepository_args.prototype = {};
Hawk_addRepository_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.repo = new Repository();
        this.repo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.credentials = new Credentials();
        this.credentials.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_addRepository_args.prototype.write = function(output) {
  output.writeStructBegin('Hawk_addRepository_args');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.repo !== null && this.repo !== undefined) {
    output.writeFieldBegin('repo', Thrift.Type.STRUCT, 2);
    this.repo.write(output);
    output.writeFieldEnd();
  }
  if (this.credentials !== null && this.credentials !== undefined) {
    output.writeFieldBegin('credentials', Thrift.Type.STRUCT, 3);
    this.credentials.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_addRepository_result = function(args) {
  this.err1 = null;
  this.err2 = null;
  this.err3 = null;
  this.err4 = null;
  if (args instanceof HawkInstanceNotFound) {
    this.err1 = args;
    return;
  }
  if (args instanceof HawkInstanceNotRunning) {
    this.err2 = args;
    return;
  }
  if (args instanceof UnknownRepositoryType) {
    this.err3 = args;
    return;
  }
  if (args instanceof VCSAuthenticationFailed) {
    this.err4 = args;
    return;
  }
  if (args) {
    if (args.err1 !== undefined && args.err1 !== null) {
      this.err1 = args.err1;
    }
    if (args.err2 !== undefined && args.err2 !== null) {
      this.err2 = args.err2;
    }
    if (args.err3 !== undefined && args.err3 !== null) {
      this.err3 = args.err3;
    }
    if (args.err4 !== undefined && args.err4 !== null) {
      this.err4 = args.err4;
    }
  }
};
Hawk_addRepository_result.prototype = {};
Hawk_addRepository_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err1 = new HawkInstanceNotFound();
        this.err1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.err2 = new HawkInstanceNotRunning();
        this.err2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.err3 = new UnknownRepositoryType();
        this.err3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.err4 = new VCSAuthenticationFailed();
        this.err4.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_addRepository_result.prototype.write = function(output) {
  output.writeStructBegin('Hawk_addRepository_result');
  if (this.err1 !== null && this.err1 !== undefined) {
    output.writeFieldBegin('err1', Thrift.Type.STRUCT, 1);
    this.err1.write(output);
    output.writeFieldEnd();
  }
  if (this.err2 !== null && this.err2 !== undefined) {
    output.writeFieldBegin('err2', Thrift.Type.STRUCT, 2);
    this.err2.write(output);
    output.writeFieldEnd();
  }
  if (this.err3 !== null && this.err3 !== undefined) {
    output.writeFieldBegin('err3', Thrift.Type.STRUCT, 3);
    this.err3.write(output);
    output.writeFieldEnd();
  }
  if (this.err4 !== null && this.err4 !== undefined) {
    output.writeFieldBegin('err4', Thrift.Type.STRUCT, 4);
    this.err4.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_isFrozen_args = function(args) {
  this.name = null;
  this.uri = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field name is unset!');
    }
    if (args.uri !== undefined && args.uri !== null) {
      this.uri = args.uri;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field uri is unset!');
    }
  }
};
Hawk_isFrozen_args.prototype = {};
Hawk_isFrozen_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.uri = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_isFrozen_args.prototype.write = function(output) {
  output.writeStructBegin('Hawk_isFrozen_args');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.uri !== null && this.uri !== undefined) {
    output.writeFieldBegin('uri', Thrift.Type.STRING, 2);
    output.writeString(this.uri);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_isFrozen_result = function(args) {
  this.success = null;
  this.err1 = null;
  this.err2 = null;
  if (args instanceof HawkInstanceNotFound) {
    this.err1 = args;
    return;
  }
  if (args instanceof HawkInstanceNotRunning) {
    this.err2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.err1 !== undefined && args.err1 !== null) {
      this.err1 = args.err1;
    }
    if (args.err2 !== undefined && args.err2 !== null) {
      this.err2 = args.err2;
    }
  }
};
Hawk_isFrozen_result.prototype = {};
Hawk_isFrozen_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err1 = new HawkInstanceNotFound();
        this.err1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.err2 = new HawkInstanceNotRunning();
        this.err2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_isFrozen_result.prototype.write = function(output) {
  output.writeStructBegin('Hawk_isFrozen_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.err1 !== null && this.err1 !== undefined) {
    output.writeFieldBegin('err1', Thrift.Type.STRUCT, 1);
    this.err1.write(output);
    output.writeFieldEnd();
  }
  if (this.err2 !== null && this.err2 !== undefined) {
    output.writeFieldBegin('err2', Thrift.Type.STRUCT, 2);
    this.err2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_setFrozen_args = function(args) {
  this.name = null;
  this.uri = null;
  this.isFrozen = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field name is unset!');
    }
    if (args.uri !== undefined && args.uri !== null) {
      this.uri = args.uri;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field uri is unset!');
    }
    if (args.isFrozen !== undefined && args.isFrozen !== null) {
      this.isFrozen = args.isFrozen;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field isFrozen is unset!');
    }
  }
};
Hawk_setFrozen_args.prototype = {};
Hawk_setFrozen_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.uri = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.isFrozen = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_setFrozen_args.prototype.write = function(output) {
  output.writeStructBegin('Hawk_setFrozen_args');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.uri !== null && this.uri !== undefined) {
    output.writeFieldBegin('uri', Thrift.Type.STRING, 2);
    output.writeString(this.uri);
    output.writeFieldEnd();
  }
  if (this.isFrozen !== null && this.isFrozen !== undefined) {
    output.writeFieldBegin('isFrozen', Thrift.Type.BOOL, 3);
    output.writeBool(this.isFrozen);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_setFrozen_result = function(args) {
  this.err1 = null;
  this.err2 = null;
  if (args instanceof HawkInstanceNotFound) {
    this.err1 = args;
    return;
  }
  if (args instanceof HawkInstanceNotRunning) {
    this.err2 = args;
    return;
  }
  if (args) {
    if (args.err1 !== undefined && args.err1 !== null) {
      this.err1 = args.err1;
    }
    if (args.err2 !== undefined && args.err2 !== null) {
      this.err2 = args.err2;
    }
  }
};
Hawk_setFrozen_result.prototype = {};
Hawk_setFrozen_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err1 = new HawkInstanceNotFound();
        this.err1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.err2 = new HawkInstanceNotRunning();
        this.err2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_setFrozen_result.prototype.write = function(output) {
  output.writeStructBegin('Hawk_setFrozen_result');
  if (this.err1 !== null && this.err1 !== undefined) {
    output.writeFieldBegin('err1', Thrift.Type.STRUCT, 1);
    this.err1.write(output);
    output.writeFieldEnd();
  }
  if (this.err2 !== null && this.err2 !== undefined) {
    output.writeFieldBegin('err2', Thrift.Type.STRUCT, 2);
    this.err2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_removeRepository_args = function(args) {
  this.name = null;
  this.uri = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field name is unset!');
    }
    if (args.uri !== undefined && args.uri !== null) {
      this.uri = args.uri;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field uri is unset!');
    }
  }
};
Hawk_removeRepository_args.prototype = {};
Hawk_removeRepository_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.uri = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_removeRepository_args.prototype.write = function(output) {
  output.writeStructBegin('Hawk_removeRepository_args');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.uri !== null && this.uri !== undefined) {
    output.writeFieldBegin('uri', Thrift.Type.STRING, 2);
    output.writeString(this.uri);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_removeRepository_result = function(args) {
  this.err1 = null;
  this.err2 = null;
  if (args instanceof HawkInstanceNotFound) {
    this.err1 = args;
    return;
  }
  if (args instanceof HawkInstanceNotRunning) {
    this.err2 = args;
    return;
  }
  if (args) {
    if (args.err1 !== undefined && args.err1 !== null) {
      this.err1 = args.err1;
    }
    if (args.err2 !== undefined && args.err2 !== null) {
      this.err2 = args.err2;
    }
  }
};
Hawk_removeRepository_result.prototype = {};
Hawk_removeRepository_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err1 = new HawkInstanceNotFound();
        this.err1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.err2 = new HawkInstanceNotRunning();
        this.err2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_removeRepository_result.prototype.write = function(output) {
  output.writeStructBegin('Hawk_removeRepository_result');
  if (this.err1 !== null && this.err1 !== undefined) {
    output.writeFieldBegin('err1', Thrift.Type.STRUCT, 1);
    this.err1.write(output);
    output.writeFieldEnd();
  }
  if (this.err2 !== null && this.err2 !== undefined) {
    output.writeFieldBegin('err2', Thrift.Type.STRUCT, 2);
    this.err2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_updateRepositoryCredentials_args = function(args) {
  this.name = null;
  this.uri = null;
  this.cred = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field name is unset!');
    }
    if (args.uri !== undefined && args.uri !== null) {
      this.uri = args.uri;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field uri is unset!');
    }
    if (args.cred !== undefined && args.cred !== null) {
      this.cred = new Credentials(args.cred);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field cred is unset!');
    }
  }
};
Hawk_updateRepositoryCredentials_args.prototype = {};
Hawk_updateRepositoryCredentials_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.uri = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.cred = new Credentials();
        this.cred.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_updateRepositoryCredentials_args.prototype.write = function(output) {
  output.writeStructBegin('Hawk_updateRepositoryCredentials_args');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.uri !== null && this.uri !== undefined) {
    output.writeFieldBegin('uri', Thrift.Type.STRING, 2);
    output.writeString(this.uri);
    output.writeFieldEnd();
  }
  if (this.cred !== null && this.cred !== undefined) {
    output.writeFieldBegin('cred', Thrift.Type.STRUCT, 3);
    this.cred.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_updateRepositoryCredentials_result = function(args) {
  this.err1 = null;
  this.err2 = null;
  if (args instanceof HawkInstanceNotFound) {
    this.err1 = args;
    return;
  }
  if (args instanceof HawkInstanceNotRunning) {
    this.err2 = args;
    return;
  }
  if (args) {
    if (args.err1 !== undefined && args.err1 !== null) {
      this.err1 = args.err1;
    }
    if (args.err2 !== undefined && args.err2 !== null) {
      this.err2 = args.err2;
    }
  }
};
Hawk_updateRepositoryCredentials_result.prototype = {};
Hawk_updateRepositoryCredentials_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err1 = new HawkInstanceNotFound();
        this.err1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.err2 = new HawkInstanceNotRunning();
        this.err2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_updateRepositoryCredentials_result.prototype.write = function(output) {
  output.writeStructBegin('Hawk_updateRepositoryCredentials_result');
  if (this.err1 !== null && this.err1 !== undefined) {
    output.writeFieldBegin('err1', Thrift.Type.STRUCT, 1);
    this.err1.write(output);
    output.writeFieldEnd();
  }
  if (this.err2 !== null && this.err2 !== undefined) {
    output.writeFieldBegin('err2', Thrift.Type.STRUCT, 2);
    this.err2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_listRepositories_args = function(args) {
  this.name = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field name is unset!');
    }
  }
};
Hawk_listRepositories_args.prototype = {};
Hawk_listRepositories_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_listRepositories_args.prototype.write = function(output) {
  output.writeStructBegin('Hawk_listRepositories_args');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_listRepositories_result = function(args) {
  this.success = null;
  this.err1 = null;
  this.err2 = null;
  if (args instanceof HawkInstanceNotFound) {
    this.err1 = args;
    return;
  }
  if (args instanceof HawkInstanceNotRunning) {
    this.err2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [Repository]);
    }
    if (args.err1 !== undefined && args.err1 !== null) {
      this.err1 = args.err1;
    }
    if (args.err2 !== undefined && args.err2 !== null) {
      this.err2 = args.err2;
    }
  }
};
Hawk_listRepositories_result.prototype = {};
Hawk_listRepositories_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size330 = 0;
        var _rtmp3334;
        this.success = [];
        var _etype333 = 0;
        _rtmp3334 = input.readListBegin();
        _etype333 = _rtmp3334.etype;
        _size330 = _rtmp3334.size;
        for (var _i335 = 0; _i335 < _size330; ++_i335)
        {
          var elem336 = null;
          elem336 = new Repository();
          elem336.read(input);
          this.success.push(elem336);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err1 = new HawkInstanceNotFound();
        this.err1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.err2 = new HawkInstanceNotRunning();
        this.err2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_listRepositories_result.prototype.write = function(output) {
  output.writeStructBegin('Hawk_listRepositories_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter337 in this.success)
    {
      if (this.success.hasOwnProperty(iter337))
      {
        iter337 = this.success[iter337];
        iter337.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.err1 !== null && this.err1 !== undefined) {
    output.writeFieldBegin('err1', Thrift.Type.STRUCT, 1);
    this.err1.write(output);
    output.writeFieldEnd();
  }
  if (this.err2 !== null && this.err2 !== undefined) {
    output.writeFieldBegin('err2', Thrift.Type.STRUCT, 2);
    this.err2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_listRepositoryTypes_args = function(args) {
};
Hawk_listRepositoryTypes_args.prototype = {};
Hawk_listRepositoryTypes_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_listRepositoryTypes_args.prototype.write = function(output) {
  output.writeStructBegin('Hawk_listRepositoryTypes_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_listRepositoryTypes_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
  }
};
Hawk_listRepositoryTypes_result.prototype = {};
Hawk_listRepositoryTypes_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size338 = 0;
        var _rtmp3342;
        this.success = [];
        var _etype341 = 0;
        _rtmp3342 = input.readListBegin();
        _etype341 = _rtmp3342.etype;
        _size338 = _rtmp3342.size;
        for (var _i343 = 0; _i343 < _size338; ++_i343)
        {
          var elem344 = null;
          elem344 = input.readString().value;
          this.success.push(elem344);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_listRepositoryTypes_result.prototype.write = function(output) {
  output.writeStructBegin('Hawk_listRepositoryTypes_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter345 in this.success)
    {
      if (this.success.hasOwnProperty(iter345))
      {
        iter345 = this.success[iter345];
        output.writeString(iter345);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_listFiles_args = function(args) {
  this.name = null;
  this.repository = null;
  this.filePatterns = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field name is unset!');
    }
    if (args.repository !== undefined && args.repository !== null) {
      this.repository = Thrift.copyList(args.repository, [null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field repository is unset!');
    }
    if (args.filePatterns !== undefined && args.filePatterns !== null) {
      this.filePatterns = Thrift.copyList(args.filePatterns, [null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field filePatterns is unset!');
    }
  }
};
Hawk_listFiles_args.prototype = {};
Hawk_listFiles_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size346 = 0;
        var _rtmp3350;
        this.repository = [];
        var _etype349 = 0;
        _rtmp3350 = input.readListBegin();
        _etype349 = _rtmp3350.etype;
        _size346 = _rtmp3350.size;
        for (var _i351 = 0; _i351 < _size346; ++_i351)
        {
          var elem352 = null;
          elem352 = input.readString().value;
          this.repository.push(elem352);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size353 = 0;
        var _rtmp3357;
        this.filePatterns = [];
        var _etype356 = 0;
        _rtmp3357 = input.readListBegin();
        _etype356 = _rtmp3357.etype;
        _size353 = _rtmp3357.size;
        for (var _i358 = 0; _i358 < _size353; ++_i358)
        {
          var elem359 = null;
          elem359 = input.readString().value;
          this.filePatterns.push(elem359);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_listFiles_args.prototype.write = function(output) {
  output.writeStructBegin('Hawk_listFiles_args');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.repository !== null && this.repository !== undefined) {
    output.writeFieldBegin('repository', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.repository.length);
    for (var iter360 in this.repository)
    {
      if (this.repository.hasOwnProperty(iter360))
      {
        iter360 = this.repository[iter360];
        output.writeString(iter360);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.filePatterns !== null && this.filePatterns !== undefined) {
    output.writeFieldBegin('filePatterns', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.filePatterns.length);
    for (var iter361 in this.filePatterns)
    {
      if (this.filePatterns.hasOwnProperty(iter361))
      {
        iter361 = this.filePatterns[iter361];
        output.writeString(iter361);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_listFiles_result = function(args) {
  this.success = null;
  this.err1 = null;
  this.err2 = null;
  if (args instanceof HawkInstanceNotFound) {
    this.err1 = args;
    return;
  }
  if (args instanceof HawkInstanceNotRunning) {
    this.err2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.err1 !== undefined && args.err1 !== null) {
      this.err1 = args.err1;
    }
    if (args.err2 !== undefined && args.err2 !== null) {
      this.err2 = args.err2;
    }
  }
};
Hawk_listFiles_result.prototype = {};
Hawk_listFiles_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size362 = 0;
        var _rtmp3366;
        this.success = [];
        var _etype365 = 0;
        _rtmp3366 = input.readListBegin();
        _etype365 = _rtmp3366.etype;
        _size362 = _rtmp3366.size;
        for (var _i367 = 0; _i367 < _size362; ++_i367)
        {
          var elem368 = null;
          elem368 = input.readString().value;
          this.success.push(elem368);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err1 = new HawkInstanceNotFound();
        this.err1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.err2 = new HawkInstanceNotRunning();
        this.err2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_listFiles_result.prototype.write = function(output) {
  output.writeStructBegin('Hawk_listFiles_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter369 in this.success)
    {
      if (this.success.hasOwnProperty(iter369))
      {
        iter369 = this.success[iter369];
        output.writeString(iter369);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.err1 !== null && this.err1 !== undefined) {
    output.writeFieldBegin('err1', Thrift.Type.STRUCT, 1);
    this.err1.write(output);
    output.writeFieldEnd();
  }
  if (this.err2 !== null && this.err2 !== undefined) {
    output.writeFieldBegin('err2', Thrift.Type.STRUCT, 2);
    this.err2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_configurePolling_args = function(args) {
  this.name = null;
  this.base = null;
  this.max = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field name is unset!');
    }
    if (args.base !== undefined && args.base !== null) {
      this.base = args.base;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field base is unset!');
    }
    if (args.max !== undefined && args.max !== null) {
      this.max = args.max;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field max is unset!');
    }
  }
};
Hawk_configurePolling_args.prototype = {};
Hawk_configurePolling_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.base = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.max = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_configurePolling_args.prototype.write = function(output) {
  output.writeStructBegin('Hawk_configurePolling_args');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.base !== null && this.base !== undefined) {
    output.writeFieldBegin('base', Thrift.Type.I32, 2);
    output.writeI32(this.base);
    output.writeFieldEnd();
  }
  if (this.max !== null && this.max !== undefined) {
    output.writeFieldBegin('max', Thrift.Type.I32, 3);
    output.writeI32(this.max);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_configurePolling_result = function(args) {
  this.err1 = null;
  this.err2 = null;
  this.err3 = null;
  if (args instanceof HawkInstanceNotFound) {
    this.err1 = args;
    return;
  }
  if (args instanceof HawkInstanceNotRunning) {
    this.err2 = args;
    return;
  }
  if (args instanceof InvalidPollingConfiguration) {
    this.err3 = args;
    return;
  }
  if (args) {
    if (args.err1 !== undefined && args.err1 !== null) {
      this.err1 = args.err1;
    }
    if (args.err2 !== undefined && args.err2 !== null) {
      this.err2 = args.err2;
    }
    if (args.err3 !== undefined && args.err3 !== null) {
      this.err3 = args.err3;
    }
  }
};
Hawk_configurePolling_result.prototype = {};
Hawk_configurePolling_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err1 = new HawkInstanceNotFound();
        this.err1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.err2 = new HawkInstanceNotRunning();
        this.err2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.err3 = new InvalidPollingConfiguration();
        this.err3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_configurePolling_result.prototype.write = function(output) {
  output.writeStructBegin('Hawk_configurePolling_result');
  if (this.err1 !== null && this.err1 !== undefined) {
    output.writeFieldBegin('err1', Thrift.Type.STRUCT, 1);
    this.err1.write(output);
    output.writeFieldEnd();
  }
  if (this.err2 !== null && this.err2 !== undefined) {
    output.writeFieldBegin('err2', Thrift.Type.STRUCT, 2);
    this.err2.write(output);
    output.writeFieldEnd();
  }
  if (this.err3 !== null && this.err3 !== undefined) {
    output.writeFieldBegin('err3', Thrift.Type.STRUCT, 3);
    this.err3.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_addDerivedAttribute_args = function(args) {
  this.name = null;
  this.spec = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field name is unset!');
    }
    if (args.spec !== undefined && args.spec !== null) {
      this.spec = new DerivedAttributeSpec(args.spec);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field spec is unset!');
    }
  }
};
Hawk_addDerivedAttribute_args.prototype = {};
Hawk_addDerivedAttribute_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.spec = new DerivedAttributeSpec();
        this.spec.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_addDerivedAttribute_args.prototype.write = function(output) {
  output.writeStructBegin('Hawk_addDerivedAttribute_args');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.spec !== null && this.spec !== undefined) {
    output.writeFieldBegin('spec', Thrift.Type.STRUCT, 2);
    this.spec.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_addDerivedAttribute_result = function(args) {
  this.err1 = null;
  this.err2 = null;
  this.err3 = null;
  if (args instanceof HawkInstanceNotFound) {
    this.err1 = args;
    return;
  }
  if (args instanceof HawkInstanceNotRunning) {
    this.err2 = args;
    return;
  }
  if (args instanceof InvalidDerivedAttributeSpec) {
    this.err3 = args;
    return;
  }
  if (args) {
    if (args.err1 !== undefined && args.err1 !== null) {
      this.err1 = args.err1;
    }
    if (args.err2 !== undefined && args.err2 !== null) {
      this.err2 = args.err2;
    }
    if (args.err3 !== undefined && args.err3 !== null) {
      this.err3 = args.err3;
    }
  }
};
Hawk_addDerivedAttribute_result.prototype = {};
Hawk_addDerivedAttribute_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err1 = new HawkInstanceNotFound();
        this.err1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.err2 = new HawkInstanceNotRunning();
        this.err2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.err3 = new InvalidDerivedAttributeSpec();
        this.err3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_addDerivedAttribute_result.prototype.write = function(output) {
  output.writeStructBegin('Hawk_addDerivedAttribute_result');
  if (this.err1 !== null && this.err1 !== undefined) {
    output.writeFieldBegin('err1', Thrift.Type.STRUCT, 1);
    this.err1.write(output);
    output.writeFieldEnd();
  }
  if (this.err2 !== null && this.err2 !== undefined) {
    output.writeFieldBegin('err2', Thrift.Type.STRUCT, 2);
    this.err2.write(output);
    output.writeFieldEnd();
  }
  if (this.err3 !== null && this.err3 !== undefined) {
    output.writeFieldBegin('err3', Thrift.Type.STRUCT, 3);
    this.err3.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_removeDerivedAttribute_args = function(args) {
  this.name = null;
  this.spec = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field name is unset!');
    }
    if (args.spec !== undefined && args.spec !== null) {
      this.spec = new DerivedAttributeSpec(args.spec);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field spec is unset!');
    }
  }
};
Hawk_removeDerivedAttribute_args.prototype = {};
Hawk_removeDerivedAttribute_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.spec = new DerivedAttributeSpec();
        this.spec.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_removeDerivedAttribute_args.prototype.write = function(output) {
  output.writeStructBegin('Hawk_removeDerivedAttribute_args');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.spec !== null && this.spec !== undefined) {
    output.writeFieldBegin('spec', Thrift.Type.STRUCT, 2);
    this.spec.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_removeDerivedAttribute_result = function(args) {
  this.err1 = null;
  this.err2 = null;
  if (args instanceof HawkInstanceNotFound) {
    this.err1 = args;
    return;
  }
  if (args instanceof HawkInstanceNotRunning) {
    this.err2 = args;
    return;
  }
  if (args) {
    if (args.err1 !== undefined && args.err1 !== null) {
      this.err1 = args.err1;
    }
    if (args.err2 !== undefined && args.err2 !== null) {
      this.err2 = args.err2;
    }
  }
};
Hawk_removeDerivedAttribute_result.prototype = {};
Hawk_removeDerivedAttribute_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err1 = new HawkInstanceNotFound();
        this.err1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.err2 = new HawkInstanceNotRunning();
        this.err2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_removeDerivedAttribute_result.prototype.write = function(output) {
  output.writeStructBegin('Hawk_removeDerivedAttribute_result');
  if (this.err1 !== null && this.err1 !== undefined) {
    output.writeFieldBegin('err1', Thrift.Type.STRUCT, 1);
    this.err1.write(output);
    output.writeFieldEnd();
  }
  if (this.err2 !== null && this.err2 !== undefined) {
    output.writeFieldBegin('err2', Thrift.Type.STRUCT, 2);
    this.err2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_listDerivedAttributes_args = function(args) {
  this.name = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field name is unset!');
    }
  }
};
Hawk_listDerivedAttributes_args.prototype = {};
Hawk_listDerivedAttributes_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_listDerivedAttributes_args.prototype.write = function(output) {
  output.writeStructBegin('Hawk_listDerivedAttributes_args');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_listDerivedAttributes_result = function(args) {
  this.success = null;
  this.err1 = null;
  this.err2 = null;
  if (args instanceof HawkInstanceNotFound) {
    this.err1 = args;
    return;
  }
  if (args instanceof HawkInstanceNotRunning) {
    this.err2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [DerivedAttributeSpec]);
    }
    if (args.err1 !== undefined && args.err1 !== null) {
      this.err1 = args.err1;
    }
    if (args.err2 !== undefined && args.err2 !== null) {
      this.err2 = args.err2;
    }
  }
};
Hawk_listDerivedAttributes_result.prototype = {};
Hawk_listDerivedAttributes_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size370 = 0;
        var _rtmp3374;
        this.success = [];
        var _etype373 = 0;
        _rtmp3374 = input.readListBegin();
        _etype373 = _rtmp3374.etype;
        _size370 = _rtmp3374.size;
        for (var _i375 = 0; _i375 < _size370; ++_i375)
        {
          var elem376 = null;
          elem376 = new DerivedAttributeSpec();
          elem376.read(input);
          this.success.push(elem376);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err1 = new HawkInstanceNotFound();
        this.err1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.err2 = new HawkInstanceNotRunning();
        this.err2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_listDerivedAttributes_result.prototype.write = function(output) {
  output.writeStructBegin('Hawk_listDerivedAttributes_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter377 in this.success)
    {
      if (this.success.hasOwnProperty(iter377))
      {
        iter377 = this.success[iter377];
        iter377.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.err1 !== null && this.err1 !== undefined) {
    output.writeFieldBegin('err1', Thrift.Type.STRUCT, 1);
    this.err1.write(output);
    output.writeFieldEnd();
  }
  if (this.err2 !== null && this.err2 !== undefined) {
    output.writeFieldBegin('err2', Thrift.Type.STRUCT, 2);
    this.err2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_addIndexedAttribute_args = function(args) {
  this.name = null;
  this.spec = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field name is unset!');
    }
    if (args.spec !== undefined && args.spec !== null) {
      this.spec = new IndexedAttributeSpec(args.spec);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field spec is unset!');
    }
  }
};
Hawk_addIndexedAttribute_args.prototype = {};
Hawk_addIndexedAttribute_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.spec = new IndexedAttributeSpec();
        this.spec.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_addIndexedAttribute_args.prototype.write = function(output) {
  output.writeStructBegin('Hawk_addIndexedAttribute_args');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.spec !== null && this.spec !== undefined) {
    output.writeFieldBegin('spec', Thrift.Type.STRUCT, 2);
    this.spec.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_addIndexedAttribute_result = function(args) {
  this.err1 = null;
  this.err2 = null;
  this.err3 = null;
  if (args instanceof HawkInstanceNotFound) {
    this.err1 = args;
    return;
  }
  if (args instanceof HawkInstanceNotRunning) {
    this.err2 = args;
    return;
  }
  if (args instanceof InvalidIndexedAttributeSpec) {
    this.err3 = args;
    return;
  }
  if (args) {
    if (args.err1 !== undefined && args.err1 !== null) {
      this.err1 = args.err1;
    }
    if (args.err2 !== undefined && args.err2 !== null) {
      this.err2 = args.err2;
    }
    if (args.err3 !== undefined && args.err3 !== null) {
      this.err3 = args.err3;
    }
  }
};
Hawk_addIndexedAttribute_result.prototype = {};
Hawk_addIndexedAttribute_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err1 = new HawkInstanceNotFound();
        this.err1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.err2 = new HawkInstanceNotRunning();
        this.err2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.err3 = new InvalidIndexedAttributeSpec();
        this.err3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_addIndexedAttribute_result.prototype.write = function(output) {
  output.writeStructBegin('Hawk_addIndexedAttribute_result');
  if (this.err1 !== null && this.err1 !== undefined) {
    output.writeFieldBegin('err1', Thrift.Type.STRUCT, 1);
    this.err1.write(output);
    output.writeFieldEnd();
  }
  if (this.err2 !== null && this.err2 !== undefined) {
    output.writeFieldBegin('err2', Thrift.Type.STRUCT, 2);
    this.err2.write(output);
    output.writeFieldEnd();
  }
  if (this.err3 !== null && this.err3 !== undefined) {
    output.writeFieldBegin('err3', Thrift.Type.STRUCT, 3);
    this.err3.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_removeIndexedAttribute_args = function(args) {
  this.name = null;
  this.spec = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field name is unset!');
    }
    if (args.spec !== undefined && args.spec !== null) {
      this.spec = new IndexedAttributeSpec(args.spec);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field spec is unset!');
    }
  }
};
Hawk_removeIndexedAttribute_args.prototype = {};
Hawk_removeIndexedAttribute_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.spec = new IndexedAttributeSpec();
        this.spec.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_removeIndexedAttribute_args.prototype.write = function(output) {
  output.writeStructBegin('Hawk_removeIndexedAttribute_args');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.spec !== null && this.spec !== undefined) {
    output.writeFieldBegin('spec', Thrift.Type.STRUCT, 2);
    this.spec.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_removeIndexedAttribute_result = function(args) {
  this.err1 = null;
  this.err2 = null;
  if (args instanceof HawkInstanceNotFound) {
    this.err1 = args;
    return;
  }
  if (args instanceof HawkInstanceNotRunning) {
    this.err2 = args;
    return;
  }
  if (args) {
    if (args.err1 !== undefined && args.err1 !== null) {
      this.err1 = args.err1;
    }
    if (args.err2 !== undefined && args.err2 !== null) {
      this.err2 = args.err2;
    }
  }
};
Hawk_removeIndexedAttribute_result.prototype = {};
Hawk_removeIndexedAttribute_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err1 = new HawkInstanceNotFound();
        this.err1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.err2 = new HawkInstanceNotRunning();
        this.err2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_removeIndexedAttribute_result.prototype.write = function(output) {
  output.writeStructBegin('Hawk_removeIndexedAttribute_result');
  if (this.err1 !== null && this.err1 !== undefined) {
    output.writeFieldBegin('err1', Thrift.Type.STRUCT, 1);
    this.err1.write(output);
    output.writeFieldEnd();
  }
  if (this.err2 !== null && this.err2 !== undefined) {
    output.writeFieldBegin('err2', Thrift.Type.STRUCT, 2);
    this.err2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_listIndexedAttributes_args = function(args) {
  this.name = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field name is unset!');
    }
  }
};
Hawk_listIndexedAttributes_args.prototype = {};
Hawk_listIndexedAttributes_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_listIndexedAttributes_args.prototype.write = function(output) {
  output.writeStructBegin('Hawk_listIndexedAttributes_args');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_listIndexedAttributes_result = function(args) {
  this.success = null;
  this.err1 = null;
  this.err2 = null;
  if (args instanceof HawkInstanceNotFound) {
    this.err1 = args;
    return;
  }
  if (args instanceof HawkInstanceNotRunning) {
    this.err2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [IndexedAttributeSpec]);
    }
    if (args.err1 !== undefined && args.err1 !== null) {
      this.err1 = args.err1;
    }
    if (args.err2 !== undefined && args.err2 !== null) {
      this.err2 = args.err2;
    }
  }
};
Hawk_listIndexedAttributes_result.prototype = {};
Hawk_listIndexedAttributes_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size378 = 0;
        var _rtmp3382;
        this.success = [];
        var _etype381 = 0;
        _rtmp3382 = input.readListBegin();
        _etype381 = _rtmp3382.etype;
        _size378 = _rtmp3382.size;
        for (var _i383 = 0; _i383 < _size378; ++_i383)
        {
          var elem384 = null;
          elem384 = new IndexedAttributeSpec();
          elem384.read(input);
          this.success.push(elem384);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err1 = new HawkInstanceNotFound();
        this.err1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.err2 = new HawkInstanceNotRunning();
        this.err2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_listIndexedAttributes_result.prototype.write = function(output) {
  output.writeStructBegin('Hawk_listIndexedAttributes_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter385 in this.success)
    {
      if (this.success.hasOwnProperty(iter385))
      {
        iter385 = this.success[iter385];
        iter385.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.err1 !== null && this.err1 !== undefined) {
    output.writeFieldBegin('err1', Thrift.Type.STRUCT, 1);
    this.err1.write(output);
    output.writeFieldEnd();
  }
  if (this.err2 !== null && this.err2 !== undefined) {
    output.writeFieldBegin('err2', Thrift.Type.STRUCT, 2);
    this.err2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_getModel_args = function(args) {
  this.name = null;
  this.options = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field name is unset!');
    }
    if (args.options !== undefined && args.options !== null) {
      this.options = new HawkQueryOptions(args.options);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field options is unset!');
    }
  }
};
Hawk_getModel_args.prototype = {};
Hawk_getModel_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.options = new HawkQueryOptions();
        this.options.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_getModel_args.prototype.write = function(output) {
  output.writeStructBegin('Hawk_getModel_args');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.options !== null && this.options !== undefined) {
    output.writeFieldBegin('options', Thrift.Type.STRUCT, 2);
    this.options.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_getModel_result = function(args) {
  this.success = null;
  this.err1 = null;
  this.err2 = null;
  if (args instanceof HawkInstanceNotFound) {
    this.err1 = args;
    return;
  }
  if (args instanceof HawkInstanceNotRunning) {
    this.err2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ModelElement]);
    }
    if (args.err1 !== undefined && args.err1 !== null) {
      this.err1 = args.err1;
    }
    if (args.err2 !== undefined && args.err2 !== null) {
      this.err2 = args.err2;
    }
  }
};
Hawk_getModel_result.prototype = {};
Hawk_getModel_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size386 = 0;
        var _rtmp3390;
        this.success = [];
        var _etype389 = 0;
        _rtmp3390 = input.readListBegin();
        _etype389 = _rtmp3390.etype;
        _size386 = _rtmp3390.size;
        for (var _i391 = 0; _i391 < _size386; ++_i391)
        {
          var elem392 = null;
          elem392 = new ModelElement();
          elem392.read(input);
          this.success.push(elem392);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err1 = new HawkInstanceNotFound();
        this.err1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.err2 = new HawkInstanceNotRunning();
        this.err2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_getModel_result.prototype.write = function(output) {
  output.writeStructBegin('Hawk_getModel_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter393 in this.success)
    {
      if (this.success.hasOwnProperty(iter393))
      {
        iter393 = this.success[iter393];
        iter393.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.err1 !== null && this.err1 !== undefined) {
    output.writeFieldBegin('err1', Thrift.Type.STRUCT, 1);
    this.err1.write(output);
    output.writeFieldEnd();
  }
  if (this.err2 !== null && this.err2 !== undefined) {
    output.writeFieldBegin('err2', Thrift.Type.STRUCT, 2);
    this.err2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_getRootElements_args = function(args) {
  this.name = null;
  this.options = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field name is unset!');
    }
    if (args.options !== undefined && args.options !== null) {
      this.options = new HawkQueryOptions(args.options);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field options is unset!');
    }
  }
};
Hawk_getRootElements_args.prototype = {};
Hawk_getRootElements_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.options = new HawkQueryOptions();
        this.options.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_getRootElements_args.prototype.write = function(output) {
  output.writeStructBegin('Hawk_getRootElements_args');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.options !== null && this.options !== undefined) {
    output.writeFieldBegin('options', Thrift.Type.STRUCT, 2);
    this.options.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_getRootElements_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ModelElement]);
    }
  }
};
Hawk_getRootElements_result.prototype = {};
Hawk_getRootElements_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size394 = 0;
        var _rtmp3398;
        this.success = [];
        var _etype397 = 0;
        _rtmp3398 = input.readListBegin();
        _etype397 = _rtmp3398.etype;
        _size394 = _rtmp3398.size;
        for (var _i399 = 0; _i399 < _size394; ++_i399)
        {
          var elem400 = null;
          elem400 = new ModelElement();
          elem400.read(input);
          this.success.push(elem400);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_getRootElements_result.prototype.write = function(output) {
  output.writeStructBegin('Hawk_getRootElements_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter401 in this.success)
    {
      if (this.success.hasOwnProperty(iter401))
      {
        iter401 = this.success[iter401];
        iter401.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_watchStateChanges_args = function(args) {
  this.name = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field name is unset!');
    }
  }
};
Hawk_watchStateChanges_args.prototype = {};
Hawk_watchStateChanges_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_watchStateChanges_args.prototype.write = function(output) {
  output.writeStructBegin('Hawk_watchStateChanges_args');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_watchStateChanges_result = function(args) {
  this.success = null;
  this.err1 = null;
  this.err2 = null;
  if (args instanceof HawkInstanceNotFound) {
    this.err1 = args;
    return;
  }
  if (args instanceof HawkInstanceNotRunning) {
    this.err2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new Subscription(args.success);
    }
    if (args.err1 !== undefined && args.err1 !== null) {
      this.err1 = args.err1;
    }
    if (args.err2 !== undefined && args.err2 !== null) {
      this.err2 = args.err2;
    }
  }
};
Hawk_watchStateChanges_result.prototype = {};
Hawk_watchStateChanges_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Subscription();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err1 = new HawkInstanceNotFound();
        this.err1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.err2 = new HawkInstanceNotRunning();
        this.err2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_watchStateChanges_result.prototype.write = function(output) {
  output.writeStructBegin('Hawk_watchStateChanges_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.err1 !== null && this.err1 !== undefined) {
    output.writeFieldBegin('err1', Thrift.Type.STRUCT, 1);
    this.err1.write(output);
    output.writeFieldEnd();
  }
  if (this.err2 !== null && this.err2 !== undefined) {
    output.writeFieldBegin('err2', Thrift.Type.STRUCT, 2);
    this.err2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_watchModelChanges_args = function(args) {
  this.name = null;
  this.repositoryUri = null;
  this.filePath = null;
  this.clientID = null;
  this.durableEvents = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field name is unset!');
    }
    if (args.repositoryUri !== undefined && args.repositoryUri !== null) {
      this.repositoryUri = args.repositoryUri;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field repositoryUri is unset!');
    }
    if (args.filePath !== undefined && args.filePath !== null) {
      this.filePath = Thrift.copyList(args.filePath, [null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field filePath is unset!');
    }
    if (args.clientID !== undefined && args.clientID !== null) {
      this.clientID = args.clientID;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field clientID is unset!');
    }
    if (args.durableEvents !== undefined && args.durableEvents !== null) {
      this.durableEvents = args.durableEvents;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field durableEvents is unset!');
    }
  }
};
Hawk_watchModelChanges_args.prototype = {};
Hawk_watchModelChanges_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.repositoryUri = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size402 = 0;
        var _rtmp3406;
        this.filePath = [];
        var _etype405 = 0;
        _rtmp3406 = input.readListBegin();
        _etype405 = _rtmp3406.etype;
        _size402 = _rtmp3406.size;
        for (var _i407 = 0; _i407 < _size402; ++_i407)
        {
          var elem408 = null;
          elem408 = input.readString().value;
          this.filePath.push(elem408);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.clientID = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.durableEvents = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_watchModelChanges_args.prototype.write = function(output) {
  output.writeStructBegin('Hawk_watchModelChanges_args');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.repositoryUri !== null && this.repositoryUri !== undefined) {
    output.writeFieldBegin('repositoryUri', Thrift.Type.STRING, 2);
    output.writeString(this.repositoryUri);
    output.writeFieldEnd();
  }
  if (this.filePath !== null && this.filePath !== undefined) {
    output.writeFieldBegin('filePath', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.filePath.length);
    for (var iter409 in this.filePath)
    {
      if (this.filePath.hasOwnProperty(iter409))
      {
        iter409 = this.filePath[iter409];
        output.writeString(iter409);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.clientID !== null && this.clientID !== undefined) {
    output.writeFieldBegin('clientID', Thrift.Type.STRING, 4);
    output.writeString(this.clientID);
    output.writeFieldEnd();
  }
  if (this.durableEvents !== null && this.durableEvents !== undefined) {
    output.writeFieldBegin('durableEvents', Thrift.Type.I32, 5);
    output.writeI32(this.durableEvents);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hawk_watchModelChanges_result = function(args) {
  this.success = null;
  this.err1 = null;
  this.err2 = null;
  if (args instanceof HawkInstanceNotFound) {
    this.err1 = args;
    return;
  }
  if (args instanceof HawkInstanceNotRunning) {
    this.err2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new Subscription(args.success);
    }
    if (args.err1 !== undefined && args.err1 !== null) {
      this.err1 = args.err1;
    }
    if (args.err2 !== undefined && args.err2 !== null) {
      this.err2 = args.err2;
    }
  }
};
Hawk_watchModelChanges_result.prototype = {};
Hawk_watchModelChanges_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Subscription();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err1 = new HawkInstanceNotFound();
        this.err1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.err2 = new HawkInstanceNotRunning();
        this.err2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hawk_watchModelChanges_result.prototype.write = function(output) {
  output.writeStructBegin('Hawk_watchModelChanges_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.err1 !== null && this.err1 !== undefined) {
    output.writeFieldBegin('err1', Thrift.Type.STRUCT, 1);
    this.err1.write(output);
    output.writeFieldEnd();
  }
  if (this.err2 !== null && this.err2 !== undefined) {
    output.writeFieldBegin('err2', Thrift.Type.STRUCT, 2);
    this.err2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

HawkClient = function(input, output) {
    this.input = input;
    this.output = (!output) ? input : output;
    this.seqid = 0;
};
HawkClient.prototype = {};
HawkClient.prototype.createInstance = function(name, backend, minimumDelayMillis, maximumDelayMillis, enabledPlugins, callback) {
  this.send_createInstance(name, backend, minimumDelayMillis, maximumDelayMillis, enabledPlugins, callback); 
  if (!callback) {
  this.recv_createInstance();
  }
};

HawkClient.prototype.send_createInstance = function(name, backend, minimumDelayMillis, maximumDelayMillis, enabledPlugins, callback) {
  this.output.writeMessageBegin('createInstance', Thrift.MessageType.CALL, this.seqid);
  var args = new Hawk_createInstance_args();
  args.name = name;
  args.backend = backend;
  args.minimumDelayMillis = minimumDelayMillis;
  args.maximumDelayMillis = maximumDelayMillis;
  args.enabledPlugins = enabledPlugins;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_createInstance();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

HawkClient.prototype.recv_createInstance = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Hawk_createInstance_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};
HawkClient.prototype.listBackends = function(callback) {
  this.send_listBackends(callback); 
  if (!callback) {
    return this.recv_listBackends();
  }
};

HawkClient.prototype.send_listBackends = function(callback) {
  this.output.writeMessageBegin('listBackends', Thrift.MessageType.CALL, this.seqid);
  var args = new Hawk_listBackends_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_listBackends();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

HawkClient.prototype.recv_listBackends = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Hawk_listBackends_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'listBackends failed: unknown result';
};
HawkClient.prototype.listPlugins = function(callback) {
  this.send_listPlugins(callback); 
  if (!callback) {
    return this.recv_listPlugins();
  }
};

HawkClient.prototype.send_listPlugins = function(callback) {
  this.output.writeMessageBegin('listPlugins', Thrift.MessageType.CALL, this.seqid);
  var args = new Hawk_listPlugins_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_listPlugins();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

HawkClient.prototype.recv_listPlugins = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Hawk_listPlugins_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'listPlugins failed: unknown result';
};
HawkClient.prototype.listInstances = function(callback) {
  this.send_listInstances(callback); 
  if (!callback) {
    return this.recv_listInstances();
  }
};

HawkClient.prototype.send_listInstances = function(callback) {
  this.output.writeMessageBegin('listInstances', Thrift.MessageType.CALL, this.seqid);
  var args = new Hawk_listInstances_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_listInstances();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

HawkClient.prototype.recv_listInstances = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Hawk_listInstances_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'listInstances failed: unknown result';
};
HawkClient.prototype.removeInstance = function(name, callback) {
  this.send_removeInstance(name, callback); 
  if (!callback) {
  this.recv_removeInstance();
  }
};

HawkClient.prototype.send_removeInstance = function(name, callback) {
  this.output.writeMessageBegin('removeInstance', Thrift.MessageType.CALL, this.seqid);
  var args = new Hawk_removeInstance_args();
  args.name = name;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_removeInstance();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

HawkClient.prototype.recv_removeInstance = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Hawk_removeInstance_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.err1) {
    throw result.err1;
  }
  return;
};
HawkClient.prototype.startInstance = function(name, callback) {
  this.send_startInstance(name, callback); 
  if (!callback) {
  this.recv_startInstance();
  }
};

HawkClient.prototype.send_startInstance = function(name, callback) {
  this.output.writeMessageBegin('startInstance', Thrift.MessageType.CALL, this.seqid);
  var args = new Hawk_startInstance_args();
  args.name = name;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_startInstance();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

HawkClient.prototype.recv_startInstance = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Hawk_startInstance_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.err1) {
    throw result.err1;
  }
  return;
};
HawkClient.prototype.stopInstance = function(name, callback) {
  this.send_stopInstance(name, callback); 
  if (!callback) {
  this.recv_stopInstance();
  }
};

HawkClient.prototype.send_stopInstance = function(name, callback) {
  this.output.writeMessageBegin('stopInstance', Thrift.MessageType.CALL, this.seqid);
  var args = new Hawk_stopInstance_args();
  args.name = name;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_stopInstance();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

HawkClient.prototype.recv_stopInstance = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Hawk_stopInstance_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.err1) {
    throw result.err1;
  }
  if (null !== result.err2) {
    throw result.err2;
  }
  return;
};
HawkClient.prototype.syncInstance = function(name, blockUntilDone, callback) {
  this.send_syncInstance(name, blockUntilDone, callback); 
  if (!callback) {
  this.recv_syncInstance();
  }
};

HawkClient.prototype.send_syncInstance = function(name, blockUntilDone, callback) {
  this.output.writeMessageBegin('syncInstance', Thrift.MessageType.CALL, this.seqid);
  var args = new Hawk_syncInstance_args();
  args.name = name;
  args.blockUntilDone = blockUntilDone;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_syncInstance();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

HawkClient.prototype.recv_syncInstance = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Hawk_syncInstance_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.err1) {
    throw result.err1;
  }
  if (null !== result.err2) {
    throw result.err2;
  }
  return;
};
HawkClient.prototype.registerMetamodels = function(name, metamodel, callback) {
  this.send_registerMetamodels(name, metamodel, callback); 
  if (!callback) {
  this.recv_registerMetamodels();
  }
};

HawkClient.prototype.send_registerMetamodels = function(name, metamodel, callback) {
  this.output.writeMessageBegin('registerMetamodels', Thrift.MessageType.CALL, this.seqid);
  var args = new Hawk_registerMetamodels_args();
  args.name = name;
  args.metamodel = metamodel;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_registerMetamodels();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

HawkClient.prototype.recv_registerMetamodels = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Hawk_registerMetamodels_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.err1) {
    throw result.err1;
  }
  if (null !== result.err2) {
    throw result.err2;
  }
  if (null !== result.err3) {
    throw result.err3;
  }
  return;
};
HawkClient.prototype.unregisterMetamodels = function(name, metamodel, callback) {
  this.send_unregisterMetamodels(name, metamodel, callback); 
  if (!callback) {
  this.recv_unregisterMetamodels();
  }
};

HawkClient.prototype.send_unregisterMetamodels = function(name, metamodel, callback) {
  this.output.writeMessageBegin('unregisterMetamodels', Thrift.MessageType.CALL, this.seqid);
  var args = new Hawk_unregisterMetamodels_args();
  args.name = name;
  args.metamodel = metamodel;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_unregisterMetamodels();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

HawkClient.prototype.recv_unregisterMetamodels = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Hawk_unregisterMetamodels_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.err1) {
    throw result.err1;
  }
  if (null !== result.err2) {
    throw result.err2;
  }
  return;
};
HawkClient.prototype.listMetamodels = function(name, callback) {
  this.send_listMetamodels(name, callback); 
  if (!callback) {
    return this.recv_listMetamodels();
  }
};

HawkClient.prototype.send_listMetamodels = function(name, callback) {
  this.output.writeMessageBegin('listMetamodels', Thrift.MessageType.CALL, this.seqid);
  var args = new Hawk_listMetamodels_args();
  args.name = name;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_listMetamodels();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

HawkClient.prototype.recv_listMetamodels = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Hawk_listMetamodels_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.err1) {
    throw result.err1;
  }
  if (null !== result.err2) {
    throw result.err2;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'listMetamodels failed: unknown result';
};
HawkClient.prototype.listTypeNames = function(hawkInstanceName, metamodelURI, callback) {
  this.send_listTypeNames(hawkInstanceName, metamodelURI, callback); 
  if (!callback) {
    return this.recv_listTypeNames();
  }
};

HawkClient.prototype.send_listTypeNames = function(hawkInstanceName, metamodelURI, callback) {
  this.output.writeMessageBegin('listTypeNames', Thrift.MessageType.CALL, this.seqid);
  var args = new Hawk_listTypeNames_args();
  args.hawkInstanceName = hawkInstanceName;
  args.metamodelURI = metamodelURI;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_listTypeNames();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

HawkClient.prototype.recv_listTypeNames = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Hawk_listTypeNames_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.err1) {
    throw result.err1;
  }
  if (null !== result.err2) {
    throw result.err2;
  }
  if (null !== result.err3) {
    throw result.err3;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'listTypeNames failed: unknown result';
};
HawkClient.prototype.listTypes = function(hawkInstanceName, metamodelURI, callback) {
  this.send_listTypes(hawkInstanceName, metamodelURI, callback); 
  if (!callback) {
    return this.recv_listTypes();
  }
};

HawkClient.prototype.send_listTypes = function(hawkInstanceName, metamodelURI, callback) {
  this.output.writeMessageBegin('listTypes', Thrift.MessageType.CALL, this.seqid);
  var args = new Hawk_listTypes_args();
  args.hawkInstanceName = hawkInstanceName;
  args.metamodelURI = metamodelURI;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_listTypes();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

HawkClient.prototype.recv_listTypes = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Hawk_listTypes_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.err1) {
    throw result.err1;
  }
  if (null !== result.err2) {
    throw result.err2;
  }
  if (null !== result.err3) {
    throw result.err3;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'listTypes failed: unknown result';
};
HawkClient.prototype.fetchType = function(hawkInstanceName, metamodelURI, typeName, callback) {
  this.send_fetchType(hawkInstanceName, metamodelURI, typeName, callback); 
  if (!callback) {
    return this.recv_fetchType();
  }
};

HawkClient.prototype.send_fetchType = function(hawkInstanceName, metamodelURI, typeName, callback) {
  this.output.writeMessageBegin('fetchType', Thrift.MessageType.CALL, this.seqid);
  var args = new Hawk_fetchType_args();
  args.hawkInstanceName = hawkInstanceName;
  args.metamodelURI = metamodelURI;
  args.typeName = typeName;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_fetchType();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

HawkClient.prototype.recv_fetchType = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Hawk_fetchType_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.err1) {
    throw result.err1;
  }
  if (null !== result.err2) {
    throw result.err2;
  }
  if (null !== result.err3) {
    throw result.err3;
  }
  if (null !== result.err4) {
    throw result.err4;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'fetchType failed: unknown result';
};
HawkClient.prototype.listMetamodelParsers = function(name, callback) {
  this.send_listMetamodelParsers(name, callback); 
  if (!callback) {
    return this.recv_listMetamodelParsers();
  }
};

HawkClient.prototype.send_listMetamodelParsers = function(name, callback) {
  this.output.writeMessageBegin('listMetamodelParsers', Thrift.MessageType.CALL, this.seqid);
  var args = new Hawk_listMetamodelParsers_args();
  args.name = name;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_listMetamodelParsers();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

HawkClient.prototype.recv_listMetamodelParsers = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Hawk_listMetamodelParsers_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.err1) {
    throw result.err1;
  }
  if (null !== result.err2) {
    throw result.err2;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'listMetamodelParsers failed: unknown result';
};
HawkClient.prototype.listQueryLanguages = function(name, callback) {
  this.send_listQueryLanguages(name, callback); 
  if (!callback) {
    return this.recv_listQueryLanguages();
  }
};

HawkClient.prototype.send_listQueryLanguages = function(name, callback) {
  this.output.writeMessageBegin('listQueryLanguages', Thrift.MessageType.CALL, this.seqid);
  var args = new Hawk_listQueryLanguages_args();
  args.name = name;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_listQueryLanguages();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

HawkClient.prototype.recv_listQueryLanguages = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Hawk_listQueryLanguages_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'listQueryLanguages failed: unknown result';
};
HawkClient.prototype.query = function(name, query, language, options, callback) {
  this.send_query(name, query, language, options, callback); 
  if (!callback) {
    return this.recv_query();
  }
};

HawkClient.prototype.send_query = function(name, query, language, options, callback) {
  this.output.writeMessageBegin('query', Thrift.MessageType.CALL, this.seqid);
  var args = new Hawk_query_args();
  args.name = name;
  args.query = query;
  args.language = language;
  args.options = options;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_query();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

HawkClient.prototype.recv_query = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Hawk_query_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.err1) {
    throw result.err1;
  }
  if (null !== result.err2) {
    throw result.err2;
  }
  if (null !== result.err3) {
    throw result.err3;
  }
  if (null !== result.err4) {
    throw result.err4;
  }
  if (null !== result.err5) {
    throw result.err5;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'query failed: unknown result';
};
HawkClient.prototype.timedQuery = function(name, query, language, options, callback) {
  this.send_timedQuery(name, query, language, options, callback); 
  if (!callback) {
    return this.recv_timedQuery();
  }
};

HawkClient.prototype.send_timedQuery = function(name, query, language, options, callback) {
  this.output.writeMessageBegin('timedQuery', Thrift.MessageType.CALL, this.seqid);
  var args = new Hawk_timedQuery_args();
  args.name = name;
  args.query = query;
  args.language = language;
  args.options = options;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_timedQuery();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

HawkClient.prototype.recv_timedQuery = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Hawk_timedQuery_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.err1) {
    throw result.err1;
  }
  if (null !== result.err2) {
    throw result.err2;
  }
  if (null !== result.err3) {
    throw result.err3;
  }
  if (null !== result.err4) {
    throw result.err4;
  }
  if (null !== result.err5) {
    throw result.err5;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'timedQuery failed: unknown result';
};
HawkClient.prototype.resolveProxies = function(name, ids, options, callback) {
  this.send_resolveProxies(name, ids, options, callback); 
  if (!callback) {
    return this.recv_resolveProxies();
  }
};

HawkClient.prototype.send_resolveProxies = function(name, ids, options, callback) {
  this.output.writeMessageBegin('resolveProxies', Thrift.MessageType.CALL, this.seqid);
  var args = new Hawk_resolveProxies_args();
  args.name = name;
  args.ids = ids;
  args.options = options;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_resolveProxies();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

HawkClient.prototype.recv_resolveProxies = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Hawk_resolveProxies_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.err1) {
    throw result.err1;
  }
  if (null !== result.err2) {
    throw result.err2;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'resolveProxies failed: unknown result';
};
HawkClient.prototype.asyncQuery = function(name, query, language, options, callback) {
  this.send_asyncQuery(name, query, language, options, callback); 
  if (!callback) {
    return this.recv_asyncQuery();
  }
};

HawkClient.prototype.send_asyncQuery = function(name, query, language, options, callback) {
  this.output.writeMessageBegin('asyncQuery', Thrift.MessageType.CALL, this.seqid);
  var args = new Hawk_asyncQuery_args();
  args.name = name;
  args.query = query;
  args.language = language;
  args.options = options;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_asyncQuery();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

HawkClient.prototype.recv_asyncQuery = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Hawk_asyncQuery_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.err1) {
    throw result.err1;
  }
  if (null !== result.err2) {
    throw result.err2;
  }
  if (null !== result.err3) {
    throw result.err3;
  }
  if (null !== result.err4) {
    throw result.err4;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'asyncQuery failed: unknown result';
};
HawkClient.prototype.cancelAsyncQuery = function(queryID, callback) {
  this.send_cancelAsyncQuery(queryID, callback); 
};

HawkClient.prototype.send_cancelAsyncQuery = function(queryID, callback) {
  this.output.writeMessageBegin('cancelAsyncQuery', Thrift.MessageType.ONEWAY, this.seqid);
  var args = new Hawk_cancelAsyncQuery_args();
  args.queryID = queryID;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_cancelAsyncQuery();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};
HawkClient.prototype.fetchAsyncQueryResults = function(queryID, callback) {
  this.send_fetchAsyncQueryResults(queryID, callback); 
  if (!callback) {
    return this.recv_fetchAsyncQueryResults();
  }
};

HawkClient.prototype.send_fetchAsyncQueryResults = function(queryID, callback) {
  this.output.writeMessageBegin('fetchAsyncQueryResults', Thrift.MessageType.CALL, this.seqid);
  var args = new Hawk_fetchAsyncQueryResults_args();
  args.queryID = queryID;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_fetchAsyncQueryResults();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

HawkClient.prototype.recv_fetchAsyncQueryResults = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Hawk_fetchAsyncQueryResults_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.err1) {
    throw result.err1;
  }
  if (null !== result.err2) {
    throw result.err2;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'fetchAsyncQueryResults failed: unknown result';
};
HawkClient.prototype.addRepository = function(name, repo, credentials, callback) {
  this.send_addRepository(name, repo, credentials, callback); 
  if (!callback) {
  this.recv_addRepository();
  }
};

HawkClient.prototype.send_addRepository = function(name, repo, credentials, callback) {
  this.output.writeMessageBegin('addRepository', Thrift.MessageType.CALL, this.seqid);
  var args = new Hawk_addRepository_args();
  args.name = name;
  args.repo = repo;
  args.credentials = credentials;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_addRepository();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

HawkClient.prototype.recv_addRepository = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Hawk_addRepository_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.err1) {
    throw result.err1;
  }
  if (null !== result.err2) {
    throw result.err2;
  }
  if (null !== result.err3) {
    throw result.err3;
  }
  if (null !== result.err4) {
    throw result.err4;
  }
  return;
};
HawkClient.prototype.isFrozen = function(name, uri, callback) {
  this.send_isFrozen(name, uri, callback); 
  if (!callback) {
    return this.recv_isFrozen();
  }
};

HawkClient.prototype.send_isFrozen = function(name, uri, callback) {
  this.output.writeMessageBegin('isFrozen', Thrift.MessageType.CALL, this.seqid);
  var args = new Hawk_isFrozen_args();
  args.name = name;
  args.uri = uri;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_isFrozen();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

HawkClient.prototype.recv_isFrozen = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Hawk_isFrozen_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.err1) {
    throw result.err1;
  }
  if (null !== result.err2) {
    throw result.err2;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'isFrozen failed: unknown result';
};
HawkClient.prototype.setFrozen = function(name, uri, isFrozen, callback) {
  this.send_setFrozen(name, uri, isFrozen, callback); 
  if (!callback) {
  this.recv_setFrozen();
  }
};

HawkClient.prototype.send_setFrozen = function(name, uri, isFrozen, callback) {
  this.output.writeMessageBegin('setFrozen', Thrift.MessageType.CALL, this.seqid);
  var args = new Hawk_setFrozen_args();
  args.name = name;
  args.uri = uri;
  args.isFrozen = isFrozen;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_setFrozen();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

HawkClient.prototype.recv_setFrozen = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Hawk_setFrozen_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.err1) {
    throw result.err1;
  }
  if (null !== result.err2) {
    throw result.err2;
  }
  return;
};
HawkClient.prototype.removeRepository = function(name, uri, callback) {
  this.send_removeRepository(name, uri, callback); 
  if (!callback) {
  this.recv_removeRepository();
  }
};

HawkClient.prototype.send_removeRepository = function(name, uri, callback) {
  this.output.writeMessageBegin('removeRepository', Thrift.MessageType.CALL, this.seqid);
  var args = new Hawk_removeRepository_args();
  args.name = name;
  args.uri = uri;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_removeRepository();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

HawkClient.prototype.recv_removeRepository = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Hawk_removeRepository_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.err1) {
    throw result.err1;
  }
  if (null !== result.err2) {
    throw result.err2;
  }
  return;
};
HawkClient.prototype.updateRepositoryCredentials = function(name, uri, cred, callback) {
  this.send_updateRepositoryCredentials(name, uri, cred, callback); 
  if (!callback) {
  this.recv_updateRepositoryCredentials();
  }
};

HawkClient.prototype.send_updateRepositoryCredentials = function(name, uri, cred, callback) {
  this.output.writeMessageBegin('updateRepositoryCredentials', Thrift.MessageType.CALL, this.seqid);
  var args = new Hawk_updateRepositoryCredentials_args();
  args.name = name;
  args.uri = uri;
  args.cred = cred;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_updateRepositoryCredentials();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

HawkClient.prototype.recv_updateRepositoryCredentials = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Hawk_updateRepositoryCredentials_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.err1) {
    throw result.err1;
  }
  if (null !== result.err2) {
    throw result.err2;
  }
  return;
};
HawkClient.prototype.listRepositories = function(name, callback) {
  this.send_listRepositories(name, callback); 
  if (!callback) {
    return this.recv_listRepositories();
  }
};

HawkClient.prototype.send_listRepositories = function(name, callback) {
  this.output.writeMessageBegin('listRepositories', Thrift.MessageType.CALL, this.seqid);
  var args = new Hawk_listRepositories_args();
  args.name = name;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_listRepositories();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

HawkClient.prototype.recv_listRepositories = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Hawk_listRepositories_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.err1) {
    throw result.err1;
  }
  if (null !== result.err2) {
    throw result.err2;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'listRepositories failed: unknown result';
};
HawkClient.prototype.listRepositoryTypes = function(callback) {
  this.send_listRepositoryTypes(callback); 
  if (!callback) {
    return this.recv_listRepositoryTypes();
  }
};

HawkClient.prototype.send_listRepositoryTypes = function(callback) {
  this.output.writeMessageBegin('listRepositoryTypes', Thrift.MessageType.CALL, this.seqid);
  var args = new Hawk_listRepositoryTypes_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_listRepositoryTypes();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

HawkClient.prototype.recv_listRepositoryTypes = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Hawk_listRepositoryTypes_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'listRepositoryTypes failed: unknown result';
};
HawkClient.prototype.listFiles = function(name, repository, filePatterns, callback) {
  this.send_listFiles(name, repository, filePatterns, callback); 
  if (!callback) {
    return this.recv_listFiles();
  }
};

HawkClient.prototype.send_listFiles = function(name, repository, filePatterns, callback) {
  this.output.writeMessageBegin('listFiles', Thrift.MessageType.CALL, this.seqid);
  var args = new Hawk_listFiles_args();
  args.name = name;
  args.repository = repository;
  args.filePatterns = filePatterns;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_listFiles();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

HawkClient.prototype.recv_listFiles = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Hawk_listFiles_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.err1) {
    throw result.err1;
  }
  if (null !== result.err2) {
    throw result.err2;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'listFiles failed: unknown result';
};
HawkClient.prototype.configurePolling = function(name, base, max, callback) {
  this.send_configurePolling(name, base, max, callback); 
  if (!callback) {
  this.recv_configurePolling();
  }
};

HawkClient.prototype.send_configurePolling = function(name, base, max, callback) {
  this.output.writeMessageBegin('configurePolling', Thrift.MessageType.CALL, this.seqid);
  var args = new Hawk_configurePolling_args();
  args.name = name;
  args.base = base;
  args.max = max;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_configurePolling();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

HawkClient.prototype.recv_configurePolling = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Hawk_configurePolling_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.err1) {
    throw result.err1;
  }
  if (null !== result.err2) {
    throw result.err2;
  }
  if (null !== result.err3) {
    throw result.err3;
  }
  return;
};
HawkClient.prototype.addDerivedAttribute = function(name, spec, callback) {
  this.send_addDerivedAttribute(name, spec, callback); 
  if (!callback) {
  this.recv_addDerivedAttribute();
  }
};

HawkClient.prototype.send_addDerivedAttribute = function(name, spec, callback) {
  this.output.writeMessageBegin('addDerivedAttribute', Thrift.MessageType.CALL, this.seqid);
  var args = new Hawk_addDerivedAttribute_args();
  args.name = name;
  args.spec = spec;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_addDerivedAttribute();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

HawkClient.prototype.recv_addDerivedAttribute = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Hawk_addDerivedAttribute_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.err1) {
    throw result.err1;
  }
  if (null !== result.err2) {
    throw result.err2;
  }
  if (null !== result.err3) {
    throw result.err3;
  }
  return;
};
HawkClient.prototype.removeDerivedAttribute = function(name, spec, callback) {
  this.send_removeDerivedAttribute(name, spec, callback); 
  if (!callback) {
  this.recv_removeDerivedAttribute();
  }
};

HawkClient.prototype.send_removeDerivedAttribute = function(name, spec, callback) {
  this.output.writeMessageBegin('removeDerivedAttribute', Thrift.MessageType.CALL, this.seqid);
  var args = new Hawk_removeDerivedAttribute_args();
  args.name = name;
  args.spec = spec;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_removeDerivedAttribute();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

HawkClient.prototype.recv_removeDerivedAttribute = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Hawk_removeDerivedAttribute_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.err1) {
    throw result.err1;
  }
  if (null !== result.err2) {
    throw result.err2;
  }
  return;
};
HawkClient.prototype.listDerivedAttributes = function(name, callback) {
  this.send_listDerivedAttributes(name, callback); 
  if (!callback) {
    return this.recv_listDerivedAttributes();
  }
};

HawkClient.prototype.send_listDerivedAttributes = function(name, callback) {
  this.output.writeMessageBegin('listDerivedAttributes', Thrift.MessageType.CALL, this.seqid);
  var args = new Hawk_listDerivedAttributes_args();
  args.name = name;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_listDerivedAttributes();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

HawkClient.prototype.recv_listDerivedAttributes = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Hawk_listDerivedAttributes_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.err1) {
    throw result.err1;
  }
  if (null !== result.err2) {
    throw result.err2;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'listDerivedAttributes failed: unknown result';
};
HawkClient.prototype.addIndexedAttribute = function(name, spec, callback) {
  this.send_addIndexedAttribute(name, spec, callback); 
  if (!callback) {
  this.recv_addIndexedAttribute();
  }
};

HawkClient.prototype.send_addIndexedAttribute = function(name, spec, callback) {
  this.output.writeMessageBegin('addIndexedAttribute', Thrift.MessageType.CALL, this.seqid);
  var args = new Hawk_addIndexedAttribute_args();
  args.name = name;
  args.spec = spec;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_addIndexedAttribute();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

HawkClient.prototype.recv_addIndexedAttribute = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Hawk_addIndexedAttribute_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.err1) {
    throw result.err1;
  }
  if (null !== result.err2) {
    throw result.err2;
  }
  if (null !== result.err3) {
    throw result.err3;
  }
  return;
};
HawkClient.prototype.removeIndexedAttribute = function(name, spec, callback) {
  this.send_removeIndexedAttribute(name, spec, callback); 
  if (!callback) {
  this.recv_removeIndexedAttribute();
  }
};

HawkClient.prototype.send_removeIndexedAttribute = function(name, spec, callback) {
  this.output.writeMessageBegin('removeIndexedAttribute', Thrift.MessageType.CALL, this.seqid);
  var args = new Hawk_removeIndexedAttribute_args();
  args.name = name;
  args.spec = spec;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_removeIndexedAttribute();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

HawkClient.prototype.recv_removeIndexedAttribute = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Hawk_removeIndexedAttribute_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.err1) {
    throw result.err1;
  }
  if (null !== result.err2) {
    throw result.err2;
  }
  return;
};
HawkClient.prototype.listIndexedAttributes = function(name, callback) {
  this.send_listIndexedAttributes(name, callback); 
  if (!callback) {
    return this.recv_listIndexedAttributes();
  }
};

HawkClient.prototype.send_listIndexedAttributes = function(name, callback) {
  this.output.writeMessageBegin('listIndexedAttributes', Thrift.MessageType.CALL, this.seqid);
  var args = new Hawk_listIndexedAttributes_args();
  args.name = name;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_listIndexedAttributes();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

HawkClient.prototype.recv_listIndexedAttributes = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Hawk_listIndexedAttributes_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.err1) {
    throw result.err1;
  }
  if (null !== result.err2) {
    throw result.err2;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'listIndexedAttributes failed: unknown result';
};
HawkClient.prototype.getModel = function(name, options, callback) {
  this.send_getModel(name, options, callback); 
  if (!callback) {
    return this.recv_getModel();
  }
};

HawkClient.prototype.send_getModel = function(name, options, callback) {
  this.output.writeMessageBegin('getModel', Thrift.MessageType.CALL, this.seqid);
  var args = new Hawk_getModel_args();
  args.name = name;
  args.options = options;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_getModel();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

HawkClient.prototype.recv_getModel = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Hawk_getModel_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.err1) {
    throw result.err1;
  }
  if (null !== result.err2) {
    throw result.err2;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getModel failed: unknown result';
};
HawkClient.prototype.getRootElements = function(name, options, callback) {
  this.send_getRootElements(name, options, callback); 
  if (!callback) {
    return this.recv_getRootElements();
  }
};

HawkClient.prototype.send_getRootElements = function(name, options, callback) {
  this.output.writeMessageBegin('getRootElements', Thrift.MessageType.CALL, this.seqid);
  var args = new Hawk_getRootElements_args();
  args.name = name;
  args.options = options;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_getRootElements();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

HawkClient.prototype.recv_getRootElements = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Hawk_getRootElements_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getRootElements failed: unknown result';
};
HawkClient.prototype.watchStateChanges = function(name, callback) {
  this.send_watchStateChanges(name, callback); 
  if (!callback) {
    return this.recv_watchStateChanges();
  }
};

HawkClient.prototype.send_watchStateChanges = function(name, callback) {
  this.output.writeMessageBegin('watchStateChanges', Thrift.MessageType.CALL, this.seqid);
  var args = new Hawk_watchStateChanges_args();
  args.name = name;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_watchStateChanges();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

HawkClient.prototype.recv_watchStateChanges = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Hawk_watchStateChanges_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.err1) {
    throw result.err1;
  }
  if (null !== result.err2) {
    throw result.err2;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'watchStateChanges failed: unknown result';
};
HawkClient.prototype.watchModelChanges = function(name, repositoryUri, filePath, clientID, durableEvents, callback) {
  this.send_watchModelChanges(name, repositoryUri, filePath, clientID, durableEvents, callback); 
  if (!callback) {
    return this.recv_watchModelChanges();
  }
};

HawkClient.prototype.send_watchModelChanges = function(name, repositoryUri, filePath, clientID, durableEvents, callback) {
  this.output.writeMessageBegin('watchModelChanges', Thrift.MessageType.CALL, this.seqid);
  var args = new Hawk_watchModelChanges_args();
  args.name = name;
  args.repositoryUri = repositoryUri;
  args.filePath = filePath;
  args.clientID = clientID;
  args.durableEvents = durableEvents;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_watchModelChanges();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

HawkClient.prototype.recv_watchModelChanges = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Hawk_watchModelChanges_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.err1) {
    throw result.err1;
  }
  if (null !== result.err2) {
    throw result.err2;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'watchModelChanges failed: unknown result';
};
